---
title: "Programming Animated Statistical Graphics with R"
title-block-banner: True
author: "Wang Yaling"
date: "Jan 22, 2024"
date-modified: last-modified
date-format: medium
excute:
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1. Basic concepts of animation

![](images/Basic_concept_of_animation.jpg){fig-align="center"}

Before we dive into the steps for creating an animated statistical graph, itâ€™s important to understand some of the key concepts and terminology related to this type of visualization.

1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.

2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: load R packages"
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse)
```

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: importing data"
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
```

::: callout-note
Things to learn from the code chunk above:

-   [`read_xls()`](https://readxl.tidyverse.org/reference/read_excel.html) of **readxl** package is used to import the Excel worksheet.

-   `mutate_at_()` of dplyr package is used to convert all character data type into factor.

-   `mutate` of dplyr package is used to convert data values of Year field into integer.
:::

Instead of using `mutate_at()`, `across()` can be used to derive the same outputs.

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: across()"
#| warning: false
col <- c("Country", "Continent")
globalPop <- read_xls("data/GlobalPopulation.xls",
                      sheet="Data") %>%
  mutate(across(col, as.factor)) %>%
  mutate(Year = as.integer(Year))
```

# 2. gganimate

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: build a static bubble plot"
#| warning: false
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') 
```

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: build an animated bubble plot"
ggplot(globalPop, aes(x = Old, y = Young, 
                      size = Population, 
                      colour = Country)) +
  geom_point(alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(title = 'Year: {frame_time}', 
       x = '% Aged', 
       y = '% Young') +
  transition_time(Year) +       
  ease_aes('linear')          
```

`transition_time()` of gganimate is used to create transition through distinct states in time (i.e. Year).

`ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

# 3. plotly

## 3.1 ggplotly

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: build an animated bubble plot by ggplotly()"
#| warning: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7, 
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young')

ggplotly(gg)         
```

Things to learn from the code chunk above:

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.

-   ggplotly() is then used to convert the R graphic object into an animated svg object.

Notice that although `show.legend = FALSE` argument was used, the legend still appears on the plot. To overcome this problem, `theme(legend.position='none')` should be used as shown in the plot and code chunk below.

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: remove legend"
#| warning: false
gg <- ggplot(globalPop, 
       aes(x = Old, 
           y = Young, 
           size = Population, 
           colour = Country)) +
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  labs(x = '% Aged', 
       y = '% Young') + 
  theme(legend.position='none')

ggplotly(gg)
        
```

## 3.2 plot_ly

```{r}
#| code-fold: TRUE
#| code-summary: "Show the code: build an animated bubble plot by plot_ly()"
#| warning: false
bp <- globalPop %>%
  plot_ly(x = ~Old, 
          y = ~Young, 
          size = ~Population, 
          color = ~Continent,
          sizes = c(2, 100),
          frame = ~Year, 
          text = ~Country, 
          hoverinfo = "text",
          type = 'scatter',
          mode = 'markers'
          ) %>%
  layout(showlegend = FALSE)
bp        
```
