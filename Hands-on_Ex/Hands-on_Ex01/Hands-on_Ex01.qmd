---
title: "1 A Layered Grammar of Graphics: ggplot2 methods"
title-block-banner: "#F0FFFF"
author: "Wang Yaling"
email: "yalingsayhi@gmail.com"
published-title: "Last Modified"
date: last-modified
date-format: full
abstract: 
    This blog is maily introducing different plots by using ggplot() in R.
---

# ***1 Getting Started***

## ***1.1 Installing and loading required libraries***

The code chunk below use **`p_load()`** of **`pacman`** package to check if **`tidyverse`** packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

The `tidyverse` is a package in R which includes a collection of packages for tasks such as data processing, visualization, statistical modeling, and more. Some commonly used packages within the tidyverse are ggplot2, dplyr, tidyr, readr, tibble, and purrr.

## ***1.2 Importing data***

```{r}
exam_data <- read.csv("data/Exam_data.csv")
glimpse(exam_data)
```

This data set contains 322 student data, with 7 data for each student. Four categorical attributes: ID, class, gender, race. Three continuous attributes: English score, Math scores, Science score.

# ***2 Introducing ggplot***

![](images/ggplot2.png){fig-align="center"}

ggplot2 is a part of the `tidyverse` family specially designed for visual exploration and communication.

## *2.1 R Graphics VS ggplot*

::: panel-tabset
### ***R Graphics***

```{r}
hist(exam_data$MATHS)
```

### ***ggplot***

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

::: callout-note
add the below code before ggplot()

-   to only show code: **`#| eval: false`**

-   to only show plot: **`#| echo: false`**
:::

# *3 Essential Grammatical Elements in ggplot2*

## *3.1 Data*

```{r}
ggplot(data=exam_data)
```

::: callout-note
-   A blank canvas appears.

-   **`ggplot()`** initializes a ggplot object.

-   The data argument defines the data set to be used for plotting.

-   If the data set is not already a data.frame, it will be converted to one by **`.fortify()`**
:::

## *3.2 Aesthetic mappings*

Here for showing the x-axis and y-axis of the plot. The aesthetic mappings take attributes of the data. For example, Class, Gender, Race, English, Maths, Science.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

## *3.3 geom*

![](images/image6.jpg)

### *3.3.1 geom_bar()*

```{r}
ggplot(data = exam_data,
       aes(x=RACE))+
  geom_bar()
```

### *3.3.2 geom_dotplot()*

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

The y scale above is very misleading. Next step is to turn-off y scale using **`scale_y_continuous()`** and change the **`binwidth`** to 2.5

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```

### *3.3.3 geom_histogram()*

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       
```

***Modify histogram***

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="lightblue")  
```

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="black")
```

### *3.3.4 geom_density()*

::: panel-tabset
### ***One kernel density***

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

### ***Two kernel density***

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```
:::

### *3.3.5 geom_boxplot*

**`geom_boxplot()`** displays continuous value list. It visualizes five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()            
```

If the median value is similar, use **`geom_boxplot(notch=TRUE)`** to get a clear difference.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

### *3.3.6 geom_violin()*

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

### *3.3.7 geom_point()*

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            
```

### *3.3.8 Combine geom objects*

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)        
```

::: callout-note
`position="jitter"` introduces small random displacements to the positions of data points to prevent overlapping on the chart.
:::

## *3.4 stat*

### *3.4.1 Statistic dot value*

::: panel-tabset
### ***stat_summary()***

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun="mean",         
               colour ="red",        
               size=2)               
```

### ***geom_point(stat = "summary")***

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun="mean",           
             colour ="red",          
             size=2)          
```
:::

### *3.4.2 Fit curve*

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(formula = y~x , linewidth=0.5)
```

Change the line method. The default method is loess. Change it to lm.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(formula = y~x , method=lm, linewidth=0.5)
```

## *3.5 Facets*

### *3.5.1 facet_wrap()*

Putting multiple plot together. Showing 2d difference.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

### *3.5.2 facet_grid()*

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

## *3.6 Coordinates*

### *3.6.1 Changing orientation*

Flip the horizontal bar chart into vertical bar chart by using **`coord_flip()`**

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

### ***3.6.2 Changing the data range***

Change the y-axis and x-axis range by using **`coord_cartesian()`**

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(formula = y~x , method=lm, linewidth=0.5) +  
  coord_cartesian(xlim=c(0,100), ylim=c(0,100))
```

## *3.7 Themes*

Built-in themes include: `-.(default)`, `-.theme_gray()`, `-.theme_bw()`, `-.theme_classic()`, `-.theme_minimal()`

::: panel-tabset
## theme_gray

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

## theme_bw

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_bw()
```

## theme_classic

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

## theme_minimal

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
:::

![](/images/thank.png){fig-align="center" width="587"}
