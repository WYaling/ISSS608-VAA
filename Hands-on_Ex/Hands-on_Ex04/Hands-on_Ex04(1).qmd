---
title: "Visualising Distribution: Ridgeline Plot & Raincloud Plot"
title-block-banner: True
author: "Wang Yaling"
date: "Jan 30, 2024"
date-modified: last-modified
date-format: medium
excute:
  eval: true
  echo: true
  warning: false
editor: visual
---

::: {style="color: black;  padding: 15px; background-color:Azure;  border: 15px solid LightSkyBlue; margin: 10px;border-radius: 12px;"}
# Learning Outcome

Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ***ridgeline*** plot and ***raincloud*** plot by using ggplot2 and its extensions.
:::

# 1. Getting Started

```{r}
#| code-fold: true
#| code-summary: "Show the code: Load R packages"


pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)
```

[`ggridges`](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html), a ggplot2 extension specially designed for plotting [*ridgeline plots*](https://r-graph-gallery.com/294-basic-ridgeline-plot.html)

```{r}
#| code-fold: true
#| code-summary: "Show the code: Import data"

exam <- read_csv("data/Exam_data.csv")
```

# 2. Making Ridgeline Plot

The R package used in this section for ridgeline plot is `ggridges`.

*Ridgeline plot* (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.

::: callout-note
Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than **5** groups, dealing with other distribution plots is probably better.
:::

## 2.1 Create plot by geom_density_ridges()

refer to this [link](https://wilkelab.org/ggridges/reference/geom_density_ridges.html) for `geom_density_ridges()`

```{r}
#| code-fold: true
#| code-summary: "Show the code: making ridgeline plot by geom_density_ridges()"
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 4,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = "Class", expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

## 2.2 Design color of ridgeline plot

### 2.2.1 Fill gradients along the x axis

```{r}
#| code-fold: true
#| code-summary: "Show the code: fill color by geom_density_ridges_gradient()"
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Student Score",
                       option = "H") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = "Class", expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

::: callout-note
Design color by [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)or [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)

For example, in the code chunk above:

`geom_density_ridges_gradient( scale = 3, rel_min_height = 0.01) +`

`scale_fill_viridis_c(name = "Temp. [F]", option = "H")`
:::

### 2.2.2 **Mapping the probabilities directly onto color**

```{r}
#| code-fold: true
#| code-summary: "Show the code: fill color by stat_density_ridges()"
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```

::: callout-important
It is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.
:::

### 2.2.3 Ridgeline plots with quantile lines

```{r}
#| code-fold: true
#| code-summary: "Show the code: fill quantile lines(quantiles = 4)"
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```

Instead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot.

```{r}
#| code-fold: true
#| code-summary: "Show the code: fill quantile lines(cut points)"
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```

# 3. Making Raincloud Plot

The R package used in this section for raincloud plot is `ggdist`.

## 3.1 Steps for creating a raincloud plot

### 3.1.1 Making half-eye plot

```{r}
#| code-fold: true
#| code-summary: "Show the code: making half-eye plot by stat_halfeye()"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)+
  theme_clean() +
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "white", color = NA))
```

### 3.1.2 Adding the boxplot with geom_boxplot()

```{r}
#| code-fold: true
#| code-summary: "Show the code: add boxplot next to half-eye plot"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  theme_clean() +
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "white", color = NA))
```

### 3.1.3 Adding the Dot Plots with `stat_dots()`

```{r}
#| code-fold: true
#| code-summary: "Show the code: add dot plots"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2) +
  theme_clean() +
  theme(plot.background = element_rect(fill = "white", color = NA),  
        panel.background = element_rect(fill = "white", color = NA))
```

## 3.2 Design the raincload plot

Flip the raincloud chart and apply another theme to make the raincloud plot more beautiful.

```{r}
#| code-fold: true
#| code-summary: "Show the code: filp the chart and apply theme"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```
