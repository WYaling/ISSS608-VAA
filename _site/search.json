[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-1",
    "title": "Peer Critique & DataVis Makeover",
    "section": "3.1 Chart 1",
    "text": "3.1 Chart 1\n\nOriginal Design\n\n\n\nCritique\n\n\nClarity:\n\nGood Points:\n\nSpecific values are labeled above each bar, facilitating comparison.\nMedian and mean are marked with different colored dashed lines, accompanied by text and numerical values.\nThe meaning expressed by the plot title and axes title is clear.\n\nWeak Points:\n\nThe overall shape of the histogram is not pronounced, lacking a curve to visually represent the distribution of data.\n\n\nAesthetics:\n\nGood Points:\n\nDifferent colors are used to distinguish the filling and outline of the histogram.\nConsistency in color between dashed lines representing the same data and the color of text labels; a clear differentiation of colors for the median and mean.\n\nWeak Points:\n\nThere are too many data labels on the bars. For example, displaying data above the bars is unnecessary as the length differences between bars are already apparent, and adding data for comparison is not needed.\nThe X-axis has an excessive number of ticks, while the Y-axis has few ticks.\n\n\n\n\n\nRedesign\n\n\nShow the code: redesign sketch\n# Calculate histogram\nhist_data &lt;- hist(stu_df$Average_Score, breaks = 20, plot = FALSE)\n\n# Find the position of the highest point\nmax_count &lt;- max(hist_data$counts)\nmax_index &lt;- which(hist_data$counts == max_count)\nmode_x &lt;- hist_data$mids[max_index]\n\n# Calculate mean and median\naverage_sci &lt;- mean(stu_df$Average_Score, na.rm = TRUE)\nmedian_sci &lt;- median(stu_df$Average_Score, na.rm = TRUE)\n\np1 &lt;-ggplot(stu_df, aes(x = Average_Score)) +\n  geom_histogram(aes(y = ..density..), bins = 20, color = \"grey95\", fill = \"cadetblue3\",alpha=0.7) +\n  geom_density(color = \"black\", lwd = 1) +\n  \n  # Add points for mean, median, and mode\n  geom_point(data = data.frame(x = c(average_sci, median_sci, mode_x),\n                                y = c(0, 0, 0),\n                                label = c(\"Mean\", \"Median\", \"Mode\")),\n             aes(x = x, y = y, color = label), shape = 16, size = 3, show.legend = TRUE) + \n  \n  labs(title = \"Distribution of Total Average Scores\",\n       x = \"Total Average Score\",\n       y = \"Density\", \n       color = \"Data point\") +\n  theme_clean() + \n  theme(legend.position = \"top\",\n        plot.background = element_rect(fill = \"white\", color = NA),  \n        panel.background = element_rect(fill = \"white\", color = NA),  \n        plot.title = element_text(hjust = 0.5, size = 25),  \n        plot.subtitle = element_text(hjust = 0.5, size = 10), \n        axis.title = element_text(size = 12, face = \"bold\"),\n        axis.title.y = element_text(size = 12, face = \"bold\", angle = 0, vjust = 1),\n        axis.text = element_text(size = 10),  \n        axis.text.y = element_text(size = 10),\n        plot.margin = margin(10, 10, 10, 10))\nggsave(\"images/Redesign1.jpg\", width = 25, height = 15, units = \"cm\")\n\n\n\n\n\n\n\n\nOptimized Points：\n\nChange the histogram to a density plot with both bars and curves, as a density plot can also depict the distribution of data.\nIncrease the font size and bold the titles of the plot, X-axis, and Y-axis.\nEnlarge the scale of the X-axis and reduce the scale of the Y-axis.\nAdd horizontal grid lines to facilitate readers in observing the probability density of the data intervals.\nDifferentiate the positions of mean, median, and mode on the X-axis and Y-axis using different colors, and add a legend for the data points.\nAdd a legend below the graph title and enclose it in a box.\n\nThe improvements made above allow readers to directly observe the distribution of the total average score: the skewness of curve and the size comparison of “mean &lt; median &lt; mode” both indicate that the data distribution of the total average score is left-skewed.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex02",
      "Peer Critique & DataVis Makeover"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-2",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-2",
    "title": "Peer Critique & DataVis Makeover",
    "section": "3.2 Chart 2",
    "text": "3.2 Chart 2\n\nOriginal Design\n\n\n\nCritique\n\n\nClarity:\n\nGood Points:\n\nThe meaning of the horizontal and vertical axis scales and titles is very clear.\nThe positions of the median and mean are marked in the graph, accompanied by specific numerical values and text.\nHorizontal gridlines are included.\nData points are differentiated by color, and points with the same data type have consistent shapes and colors. A legend is provided alongside the graph to explain the color-coding.\nOutliers are represented by black dots.\n\nWeek Points:\n\nTitle is too long and lacks information; the chart depicts the distribution of mathematical scores grouped by gender, with a crucial lack of gender information in the title.\nOutliers are represented by black dots but have not been explained.\n\n\nAesthetics:\n\nGood Points:\n\nThe groups of males and females are distinguished using colors.\n\nWeek Points:\n\nThe legend seems a bit redundant since the X-axis in the graph clearly distinguishes which plot corresponds to males and females; there is no need to include an additional legend.\nThe title is positioned in the top right corner of the entire graph, creating an imbalance in the overall composition.\nThe font size and positioning of the title and subtitle are close to each other.\n\n\n\n\n\nRedesign\n\n\nShow the code: redesign sketch\nmean_values &lt;- aggregate(Math_Average ~ Gender, data = stu_df, mean)\n\np2 &lt;- ggplot(stu_df, aes(x = factor(Gender), y = Math_Average, fill = factor(Gender))) +\n  stat_slab(aes(thickness=after_stat(pdf*n)),scale=0.4)+\n  stat_dotsinterval(side=\"bottom\", scale=0.4, slab_size=NA)+\n  \n  geom_point(data = mean_values, aes(y = Math_Average), \n             color = \"red\", size = 2) +\n  \n  stat_summary(fun = mean, geom = \"text\", \n               aes(label = paste(\"Mean:\", round(..y.., 0))), \n               position = position_nudge(y = 0.5), \n               size = 3, vjust = 2, col=\"red\") +\n  \n  stat_summary(fun = median, geom = \"text\", \n               aes(label = paste(\"Median:\", round(..y.., 0))), \n               position = position_nudge(y = 0.5), \n               size = 3, vjust = -1, col=\"black\") +\n\n  scale_fill_manual(values = c(\"1\" = \"pink3\", \"2\" = \"cadetblue3\"))+\n  scale_x_discrete(labels = c(\"1\" = \"Female\", \"2\" = \"Male\"))+\n  labs(title = \"Gender-Based Distribution of Math Scores\",\n       subtitle = \"(Black dot & Black text: Median score; Red dot & Red text: Mean score)\",\n       x = \"Gender\",\n       y = \"Math Score\") +\n  theme_clean() + \n  theme(legend.position = \"none\", \n          plot.background = element_rect(fill = \"white\", color = NA),  \n          panel.background = element_rect(fill = \"white\", color = NA),  \n          plot.title = element_text(hjust = 0.5, size = 20),  \n          plot.subtitle = element_text(hjust = 0.5, size = 10), \n          axis.title = element_text(size = 12, face = \"bold\"),\n          axis.title.y = element_text(size = 12, face = \"bold\", angle = 0, vjust =0.5),\n          plot.margin = margin(10, 20, 10, 10))+\n    coord_flip()\n\nggsave(\"images/Redesign2.jpg\", width = 20, height = 15, units = \"cm\")\n\n\n\n\n\n\n\n\nOptimized Points：\n\nThe main title and axis titles in the graph have been bolded and enlarged. The graph title is centered, and there is a difference in font size between the main title and the subtitle.\nThe titles have been modified, incorporating the key information of “gender.”\nThe original horizontal and vertical axes have been swapped to increase the overall width of the graph.\nThe violin plot has been replaced with a raincloud plot. In the raincloud plot, the “cloud” part is equivalent to a half-violin plot, serving the same function as the original violin plot. The “rain” part of the raincloud plot is a scatter plot, illustrating the differences in the number of individuals in each score range.\nThe width/height of the boxplot has been increased, presenting it as a slightly thicker line in the middle, where the thicker part represents the box.\nData points are represented as dots, with different colors filling different types of data points. Text is included to indicate the data type and value. The size of points for different data types reflects the magnitude of the values. For example, if the median is greater than the mean, the shape of the mean point is larger than that of the median point.\n\nThe improved graph facilitates readers in comparing the distribution of math scores among different gender groups. Horizontally, the position, color, and values of data points can be compared within and between groups.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex02",
      "Peer Critique & DataVis Makeover"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-3",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-3",
    "title": "Peer Critique & DataVis Makeover",
    "section": "3.3 Chart 3",
    "text": "3.3 Chart 3\n\nOriginal Design\n\n\n\nCritique\n\n\nClarity:\n\nGood Points:\n\nSome of the outliers are labeled text.\n\nWeek Points:\n\nThe tick labels on the horizontal axis are unclear and do not clearly represent their specific meanings.\nThe meanings of the text labels have not been explained.\nIt is not always clear which outlier point the text labels are pointing to.\nThe positions of the medians in the box plot are too close, and there are no reference lines for comparison.\n\n\nAesthetics:\n\nGood Points:\n\nThe plots for different groups have been designed in different colors.\n\nWeek Points:\n\nThe title is positioned too far to the left, affecting the overall symmetry of the graph.\nThe font size of axis titles and tick labels is too close.\nThere are too many text labels, contributing to clutter.\n\n\n\n\n\nRedesign\n\n\nShow the code: redesign sketch\n# Define Score by choosing a specific type, e.g., Math_Average\nScore_long &lt;- Score_by_School %&gt;%\n  pivot_longer(\n    cols = c(\"Math_Average\", \"Reading_Average\", \"Science_Average\", \"Average_score\"),\n    names_to = \"Score_Type\",\n    values_to = \"Score\"\n  )\n\n# Calculate outliers using the IQR method\noutliers &lt;- Score_long %&gt;%\n  group_by(Score_Type) %&gt;%\n  summarize(\n    lower_limit = quantile(Score, 0.25) - 1.5 * IQR(Score),\n    upper_limit = quantile(Score, 0.75) + 1.5 * IQR(Score)\n  ) %&gt;%\n  left_join(Score_long, by = \"Score_Type\") %&gt;%\n  filter(Score &lt; lower_limit | Score &gt; upper_limit)\n\n# Identify the top 3 and bottom 2 schools for each Score_Type\nselected_schools &lt;- outliers %&gt;%\n  group_by(Score_Type) %&gt;%\n  arrange(desc(Score)) %&gt;%\n  slice_head(n = 2) %&gt;%\n  bind_rows(\n    outliers %&gt;%\n      group_by(Score_Type) %&gt;%\n      arrange(Score) %&gt;%\n      slice_head(n = 2)\n  )\n\n# Custom fill colors\ncustom_fill_colors &lt;- c(\"Math_Average\" = \"mistyrose3\", \n                        \"Reading_Average\" = \"paleturquoise3\", \n                        \"Science_Average\" = \"darkolivegreen3\",\n                        \"Average_score\" = \"#d8b1d4\")\n\n\n\n# Plot box plot with selected outlier labels\np3 &lt;- ggplot(Score_long, aes(x = Score_Type, y = Score, fill = Score_Type)) +\n  geom_violin(position = position_nudge(y = 0), side = \"r\", width = 0.6, color = NA, alpha = 0.5) + \n  geom_boxplot(notch=TRUE, width = 0.2, size = 0.3, outlier.color = \"grey10\", outlier.shape = 1) +\n  \n  scale_color_manual(values = custom_fill_colors) +  # Set color scale for Score_Type\n  scale_shape_manual(values = rep(16, length(unique(selected_schools$School_ID)))) +  # Set shape for each unique School_ID\n  \n  geom_text_repel(data = selected_schools, aes(label = School_ID, x = Score_Type, y = Score),\n                  box.padding = 0.8, point.padding = 0.5, max.iter = 500,\n                  size = 3, color = \"red\", nudge_x = 0.1) +\n  \n  geom_point(data = selected_schools, aes(x = Score_Type, y = Score), color = \"red\", size = 1) +  # Add geom_point\n  \n  geom_hline(yintercept = 550, linetype = \"dashed\", color = \"blue\", lwd = 0.5) +  # Add red dashed horizontal line\n  geom_text(aes(x = 1, y = 550, label = \"550\"), color = \"blue\", vjust = 1.5,hjust= 4.5, size = 3) +  # Add label at Y-axis value of 550\n  \n  labs(title = \"Score Distributions by Score Type\",\n       subtitle = \"(Red texts represent School ID;\\nThe red dot is the data point of the nearest School ID; Black circles are outliers. )\",\n       x = \"Score Type\",\n       y = \"Score\") +\n  scale_fill_manual(values = custom_fill_colors) +\n  scale_x_discrete(labels = c(\"Average_score\" = \"Total Average\", \"Math_Average\" = \"Math\", \"Reading_Average\" = \"Reading\", \"Science_Average\" = \"Science\")) +\n  \n  theme_clean() + \n  theme(legend.position = \"none\", \n        plot.background = element_rect(fill = \"white\", color = NA),  \n        panel.background = element_rect(fill = \"white\", color = NA),  \n        plot.title = element_text(hjust = 0.5, size = 20),  \n        plot.subtitle = element_text(hjust = 0.5, size = 10), \n        axis.title = element_text(size = 13, face = \"bold\"),\n        axis.title.y = element_text(size = 13, face = \"bold\", angle = 0.8, vjust = 0.5),\n        axis.text = element_text(size = 10),  \n        axis.text.y = element_text(size = 10),\n        legend.text = element_text(size = 10),  \n        legend.title = element_text(size = 10),\n        plot.margin = margin(10, 20, 10, 10))\nggsave(\"images/Redesign3.jpg\", width = 20, height = 25, units = \"cm\")\n\n\n\n\n\n\n\n\nOptimized Points:\n\nTitle and subtitle are centered, and both are bolded and enlarged.\nGroups are renamed as “Total Average,” “Math,” “Reading,” and “Science” to clarify the meaning of the Score Types for the reader.\nText labels are reduced, and both text labels and their corresponding points are filled in red. This enhances the directional connection between text labels and points.\nThe subtitle explains the meaning, color, and purpose of data points and text labels.\nA horizontal reference line at a score of 550 is added for easier comparison with the median.\nThe original box plot is transformed into a combination of a box plot and a violin plot.\nDifferent transparencies are applied to the box plot and the violin plot to facilitate reader observation.\n\nThe improved graph combines both the box plot and the violin plot, making it more convenient for readers to analyze from different perspectives. Readers can now observe which schools perform exceptionally well or poorly by comparing the text labels. The addition of horizontal reference lines facilitates the comparison of median scores across different Score Types. The number of peaks in the violin plot also allows readers to identify distinct groups of schools, with one group scoring between 500-600 (larger quantity) and another group scoring between 600-700 (smaller quantity).",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex02",
      "Peer Critique & DataVis Makeover"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-4",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#chart-4",
    "title": "Peer Critique & DataVis Makeover",
    "section": "3.4 Chart 4",
    "text": "3.4 Chart 4\n\nOriginal Design\n\n\n\nCritique\n\n\nClarity:\n\nGood Points:\n\nRed dashed lines are used to indicate the positions of the means, and a legend has been added to explain the colors corresponding to different groups.\n\nWeek Points:\n\nIt’s unclear what ISCED levels 2, 3, 4, and 5 represent.\nIt’s unclear whether the four density plots share the same X-axis scale.\n\n\nAesthetics:\n\nGood Points:\n\nDifferent groups have been distinguished by color, and the colors are gradient because the groups are related.\nThe mean lines are designed as red dashed lines.\n\nWeek Points:\n\nThe density plot has different Y-axis density scales.\nThe plot title is too long.\nThe subtitle is off-center to the left, affecting the symmetry of the graph.\nThe starting scale value on the X-axis is too large, causing some group density plots to be incomplete.\n\n\n\n\n\nRedesign\n\n\nShow the code: redesign sketch\n# Define the conversion rules\nstu_df &lt;- stu_df %&gt;%\n  mutate(Education_level = case_when(\n    Education_mother == 5 ~ \"Did not complete &lt;ISCED level 1&gt;\",\n    Education_mother == 4 ~ \"&lt;ISCED level 1&gt;\",\n    Education_mother == 3 ~ \"&lt;ISCED level 2&gt;\",\n    Education_mother == 2 ~ \"&lt;ISCED level 3.3&gt;\",\n    TRUE ~ as.character(Education_mother)  # Keep other values as is\n  ))\n\n# Calculate the cumulative distribution function (CDF) for Math_Average\ncdf_values &lt;- ecdf(stu_df$Math_Average)\n\n# Create a new variable for tail probability based on CDF\nstu_df &lt;- stu_df %&gt;%\n  mutate(Tail_Probability = 0.5 - abs(0.5 - cdf_values(Math_Average)))\n\np4 &lt;- ggplot(na.omit(stu_df), aes(x = Math_Average, y = Education_level, fill = 0.5 - abs(0.5 - stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", calc_ecdf = TRUE, bandwidth = 45) +\n  labs(title = \"Mother's Education Level vs. Math Score Distribution\",\n       x = \"Math Score\", \n       y = \"Education Level\",\n       fill = \"Density of Math Score\") +\n  theme_classic() +\n  theme(legend.position = \"right\", \n        plot.background = element_rect(fill = \"white\", color = NA),  \n        panel.background = element_rect(fill = \"white\", color = NA),  \n        plot.title = element_text(hjust = 0.5, size = 30, face = \"bold\"),  \n        plot.margin = margin(20,20,20,20),\n        axis.title = element_text(size = 15, face = \"bold\"),\n        axis.title.y = element_text(size = 15, face = \"bold\"),\n        axis.text = element_text(size = 15),  \n        axis.text.y = element_text(size = 15,margin = margin(t = 1, r = 0, b = 0, l = -10)),\n        legend.text = element_text(size = 15),  \n        legend.title = element_text(size = 15))\n\nggsave(\"images/Redesign4.jpg\", width = 30, height = 20, units = \"cm\")\n\n\n\n\nOptimized Points：\n\nThe plot title is centered, and both the title and axis titles are bold and enlarged.\nThe title has been renamed to make it straightforward and concise.\nGroups are now named according to ISCED level and are presented on the Y-axis, while the X-axis represents math scores.\nDensity curves are filled with gradient colors, where lighter colors indicate higher density. The color gradient rules are explained in the legend on the right side of the graph.\nThe red mean lines have been removed. Instead, comparisons between groups are made using gradient color and peak of the density plot, as the central light portion of the gradient color precisely represents the 50% position.\n\nThe improved graph clearly illustrates the density distribution of mathematics scores for different ISCED levels. By comparing the positions of the peaks in each graph or examining the location of the lightest color areas, readers can understand the differences in mathematics scores among children of mothers with different educational levels. For instance, in the graph, when the mother’s education level is ISCED level 3.3, their children tend to have higher mathematics scores compared to other levels. This is because the position of the lightest color area is furthest to the right, indicating that the higher 50% of the children are distributed in the higher score range. In contrast, the 50% score range for children in the other three levels is relatively lower.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex02",
      "Peer Critique & DataVis Makeover"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yaling's VAA journey",
    "section": "",
    "text": "Welcome to Yaling’s Visual Analysis Wonderland !"
  },
  {
    "objectID": "index.html#hands-on-exercise",
    "href": "index.html#hands-on-exercise",
    "title": "Yaling's VAA journey",
    "section": "Hands-on Exercise",
    "text": "Hands-on Exercise\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nCreating Ternary Plot with R\n\n\n2 min\n\n\n\nFeb 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVisual Correlation Analysis\n\n\n10 min\n\n\n\nFeb 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nHeatmap for Visualising and Analysing Multivariate Data\n\n\n10 min\n\n\n\nFeb 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVisual Multivariate Analysis with Parallel Coordinates Plot\n\n\n6 min\n\n\n\nFeb 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTreemap Visualisation with R\n\n\n13 min\n\n\n\nFeb 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty\n\n\n12 min\n\n\n\nJan 31, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#in-class-exercise",
    "href": "index.html#in-class-exercise",
    "title": "Yaling's VAA journey",
    "section": "In-class Exercise",
    "text": "In-class Exercise\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nTableau02: Make Dashboard & Story\n\n\n1 min\n\n\n\nJan 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nTableau01: Make a Chart\n\n\n1 min\n\n\n\nJan 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nImporting Data in R\n\n\n1 min\n\n\n\nJan 13, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#take-home-exercise",
    "href": "index.html#take-home-exercise",
    "title": "Yaling's VAA journey",
    "section": "Take-home Exercise",
    "text": "Take-home Exercise\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nBe Weatherwise or Otherwise\n\n\n30 min\n\n\n\nFeb 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nPeer Critique & DataVis Makeover\n\n\n24 min\n\n\n\nJan 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis of Singaporean Students’ Performance\n\n\n55 min\n\n\n\nJan 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "Tableau01: Make a Chart",
    "section": "",
    "text": "Exercise: Make a chart in tableau\nTableau Practice of Lesson 2\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "In-class Exercise",
      "In Class Ex02",
      "Tableau01: Make a Chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(4).html",
    "title": "Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Learning Outcome\nFunnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages.\n\n\n\n\nShow the code: Load R packages\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\nIn this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.\nThe code chunk below imports the data into R and save it into a tibble data frame object called covid19.\n\n\nShow the code: Import data\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n1. FunnelPlotR\n\n\n\n\n\n\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\n\n# Create basic funnel plot\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n# Makeover1 funnel plot\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e.proportions).\nxrange and yrange are used to set the range of x-axis and y-axis\n\n\n\n\n# Makeover2 funnel plot\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\n2. Funnel Plot for Fair Visual Comparison\nStep 1: Computing the basic derived fields\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\nStep 2: Calculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\nStep 3: Plotting a static funnel plot\n\n\nShow the code: Plotting a static funnel plot\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\nStep 4: Interactive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#one-sample-test-gghistostats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#one-sample-test-gghistostats",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "2.1 One-sample test: gghistostats()",
    "text": "2.1 One-sample test: gghistostats()\n\n\nShow the code: One-sample test(gghistostats)\nset.seed(1234)  \n\n#Setting a seed ensures that the same random numbers are generated each time the code is run, aiding in achieving result reproducibility\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nUnpacking the Bayes Factor:\nIn this hands-on exercise, you will gain hands-on experience on using:\n\nggstatsplot package to create visual graphics with rich statistical information,\nperformance package to visualise model diagnostics, and\nparameters package to visualise model parameters\n\nHow to interpret Bayes Factor:\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#two-sample-mean-test-ggbetweenstats",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "2.2 Two-sample mean test: ggbetweenstats()",
    "text": "2.2 Two-sample mean test: ggbetweenstats()\n\n\nShow the code: Two-sample mean test(ggbetweenstats)\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#oneway-anova-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#oneway-anova-test-ggbetweenstats",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "2.3 Oneway ANOVA Test: ggbetweenstats()",
    "text": "2.3 Oneway ANOVA Test: ggbetweenstats()\n\n\nShow the code: Oneway ANOVA Test(ggbetweenstats)\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#significant-test-of-correlation-ggscatterstats",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "2.4 Significant Test of Correlation: ggscatterstats()",
    "text": "2.4 Significant Test of Correlation: ggscatterstats()\n\n\nShow the code: Significant Test of Correlation(ggscatterstats)\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#significant-test-of-association-depedence-ggbarstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#significant-test-of-association-depedence-ggbarstats",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "2.5 Significant Test of Association (Depedence) : ggbarstats",
    "text": "2.5 Significant Test of Association (Depedence) : ggbarstats\n\n\nShow the code: Significant Test of Association (Depedence) : (ggbarstats)\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#getting-started-1",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "3.1 Getting started",
    "text": "3.1 Getting started\n\n\nShow the code: Load R packages\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n\nShow the code: Import data\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#build-models",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(2).html#build-models",
    "title": "Visual Statistical Analysis: add statistical information in chart",
    "section": "3.2 Build models",
    "text": "3.2 Build models\n\n\nShow the code: Multiple Regression Model\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nShow the code: Model Diagnostic: checking for multicolinearity\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nShow the code: Model Diagnostic: checking for multicolinearity\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Model Diagnostic: checking normality assumption\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Model Diagnostic: Check model for homogeneity of variances\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Model Diagnostic: Complete check\ncheck_model(model1)\nggsave(\"images/ModelDiagnosticCompleteCheck.jpg\", width = 30, height = 30, units = \"cm\")\n\n\n\n\n\n\n\n\n\nShow the code: Visualising Regression Parameters: see methods\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Visualising Regression Parameters: ggcoefstats()\nggcoefstats(model1, \n            output = \"plot\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visual Statistical Analysis: add statistical information in chart"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\nShow the code: load R packages\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nShow the code: importing data\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\nNote\n\n\n\nThings to learn from the code chunk above:\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_at_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\n\nShow the code: across()\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#ggplotly",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.1 ggplotly",
    "text": "3.1 ggplotly\n\n\nShow the code: build an animated bubble plot by ggplotly()\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)         \n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nShow the code: remove legend\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(2).html#plot_ly",
    "title": "Programming Animated Statistical Graphics with R",
    "section": "3.2 plot_ly",
    "text": "3.2 plot_ly\n\n\nShow the code: build an animated bubble plot by plot_ly()\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Beside tidyverse , the below R packages will be utilised in this exercise:\n\n\n\n\n\n\n\nPackage\nFunction\n\n\n\n\nggrepel\nprovides geoms for ggplot2 to repel overlapping text labels.\n\n\nggthemes\nprovides some extra themes, geoms, and scales for ggplot2.\n\n\nhrbrthemes\nprovides typography-centric themes and theme components for ggplot2.\n\n\npatchwork\nfor preparing composite figure created using ggplot2.\n\n\n\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in .csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;int&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;int&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;int&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\nhead(exam_data)\n\n          ID CLASS GENDER    RACE ENGLISH MATHS SCIENCE\n1 Student321    3I   Male   Malay      21     9      15\n2 Student305    3I Female   Malay      24    22      16\n3 Student289    3H   Male Chinese      26    16      16\n4 Student227    3F   Male Chinese      27    77      31\n5 Student318    3I   Male   Malay      27    11      25\n6 Student306    3I Female   Malay      31    16      16\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex02",
      "Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Beside tidyverse , the below R packages will be utilised in this exercise:\n\n\n\n\n\n\n\nPackage\nFunction\n\n\n\n\nggrepel\nprovides geoms for ggplot2 to repel overlapping text labels.\n\n\nggthemes\nprovides some extra themes, geoms, and scales for ggplot2.\n\n\nhrbrthemes\nprovides typography-centric themes and theme components for ggplot2.\n\n\npatchwork\nfor preparing composite figure created using ggplot2.\n\n\n\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex02",
      "Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "For the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in .csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;int&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;int&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;int&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\nhead(exam_data)\n\n          ID CLASS GENDER    RACE ENGLISH MATHS SCIENCE\n1 Student321    3I   Male   Malay      21     9      15\n2 Student305    3I Female   Malay      24    22      16\n3 Student289    3H   Male Chinese      26    16      16\n4 Student227    3F   Male Chinese      27    77      31\n5 Student318    3I   Male   Malay      27    11      25\n6 Student306    3I Female   Malay      31    16      16\n\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex02",
      "Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#classic-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#classic-themes",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "3.1 Classic themes",
    "text": "3.1 Classic themes\nThe following table shows some classic built-in themes in ggplot2.\n\n\n\n\n\n\n\nTheme\nDescription\n\n\n\n\ntheme_gray()\na theme with grey background and white grid lines\n\n\ntheme_bw()\ndark-on-light\n\n\ntheme_linedraw()\na theme with with only black lines of various widths on white backgrounds\n\n\ntheme_light()\na theme with light grey lines and axes\n\n\ntheme_dark()\na dark background\n\n\ntheme_minimal()\na minimalistic theme with no background annotations\n\n\ntheme_classic()\na theme with x and y axis lines and no grid lines\n\n\ntheme_void()\na completely empty theme\n\n\ntheme_test()\na theme for visual unit tests\n\n\n\nRefer to this link to learn more about ggplot2 themes.\n\ntheme_graytheme_bwtheme_linedrawtheme_darktheme_minimaltheme_classictheme_voidtheme_test\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  theme_test() +\n  ggtitle(\"Distribution of Maths scores\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex02",
      "Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#theme-templates",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#theme-templates",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "3.2 Theme templates",
    "text": "3.2 Theme templates\nRefer to this link to learn some template of ggplot themes used by famous institutions. For example,\n\ntheme_wsjtheme_economisttheme_statatheme_exceltheme_fivethirtyeighttheme_tufte\n\n\n\n# The Wall Street Journal\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj() +\n  theme(plot.title = element_text(size = 15))\n\n\n\n\n\n\n\n\n\n\n\n# The Economist\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n# Stata\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_stata()\n\n\n\n\n\n\n\n\n\n\n\n# Excel\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_excel()\n\n\n\n\n\n\n\n\n\n\n\n# Fivethirtyeight\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n# Edward Tufte\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_tufte()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex02",
      "Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#custom-theme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#custom-theme",
    "title": "Beyond ggplot2 Fundamentals",
    "section": "3.3 Custom theme",
    "text": "3.3 Custom theme\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used. We can use this package to custom the plot.\n\nDefaultCustom\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18, base_size = 15, grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18.\nbase_size argument is used to increase the default axis label to 15.\ngrid argument is used to remove the x-axis grid lines.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex02",
      "Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\nThe tidyverse is a package in R which includes a collection of packages for tasks such as data processing, visualization, statistical modeling, and more. Some commonly used packages within the tidyverse are ggplot2, dplyr, tidyr, readr, tibble, and purrr.\n\n\n\n\nexam_data &lt;- read.csv(\"data/Exam_data.csv\")\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;int&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;int&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;int&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\nThis data set contains 322 student data, with 7 data for each student. Four categorical attributes: ID, class, gender, race. Three continuous attributes: English score, Math scores, Science score.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#installing-and-loading-required-libraries",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The code chunk below use p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\nThe tidyverse is a package in R which includes a collection of packages for tasks such as data processing, visualization, statistical modeling, and more. Some commonly used packages within the tidyverse are ggplot2, dplyr, tidyr, readr, tibble, and purrr.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "exam_data &lt;- read.csv(\"data/Exam_data.csv\")\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;int&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;int&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;int&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\nThis data set contains 322 student data, with 7 data for each student. Four categorical attributes: ID, class, gender, race. Three continuous attributes: English score, Math scores, Science score.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.1 Data",
    "text": "3.1 Data\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the data set to be used for plotting.\nIf the data set is not already a data.frame, it will be converted to one by .fortify()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#aesthetic-mappings",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.2 Aesthetic mappings",
    "text": "3.2 Aesthetic mappings\nHere for showing the x-axis and y-axis of the plot. The aesthetic mappings take attributes of the data. For example, Class, Gender, Race, English, Maths, Science.\n\nggplot(data=exam_data, \n       aes(x= MATHS))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.3 geom",
    "text": "3.3 geom\n\n\n3.3.1 geom_bar()\n\nggplot(data = exam_data,\n       aes(x=RACE))+\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n3.3.2 geom_dotplot()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\nThe y scale above is very misleading. Next step is to turn-off y scale using scale_y_continuous() and change the binwidth to 2.5\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n3.3.3 geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nModify histogram\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"lightblue\")  \n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"black\")\n\n\n\n\n\n\n\n\n\n\n3.3.4 geom_density()\n\nOne kernel densityTwo kernel density\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.5 geom_boxplot\ngeom_boxplot() displays continuous value list. It visualizes five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nIf the median value is similar, use geom_boxplot(notch=TRUE) to get a clear difference.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n3.3.6 geom_violin()\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n3.3.7 geom_point()\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n3.3.8 Combine geom objects\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nposition=\"jitter\" introduces small random displacements to the positions of data points to prevent overlapping on the chart.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#stat",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.4 stat",
    "text": "3.4 stat\n\n3.4.1 Statistic dot value\n\nstat_summary()geom_point(stat = “summary”)\n\n\n\nlibrary(ggplot2)\n\nggplot(data = exam_data, aes(y = MATHS, x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\", \n               fun = \"mean\", \n               colour = \"red\", \n               size = 2) +\n  geom_text(stat = \"summary\", \n            aes(label = sprintf(\"%.2f\", ..y..), \n                group = GENDER), \n            vjust = -1, \n            color = \"black\", \n            size = 3) +\n  labs(x = \"Gender\", y = \"Math Scores\") +\n  ggtitle(\"Distribution of Math Scores by Gender\") +\n  theme_minimal()\n\nWarning: The dot-dot notation (`..y..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(y)` instead.\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour =\"red\",          \n             size=2)          \n\n\n\n\n\n\n\n\n\n\n\n\n\n3.4.2 Fit curve\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x , linewidth=0.5)\n\n`geom_smooth()` using method = 'loess'\n\n\n\n\n\n\n\n\n\nChange the line method. The default method is loess. Change it to lm.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x , method=lm, linewidth=0.5)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facets",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.5 Facets",
    "text": "3.5 Facets\n\n3.5.1 facet_wrap()\nPutting multiple plot together. Showing 2d difference.\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n3.5.2 facet_grid()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#coordinates",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.6 Coordinates",
    "text": "3.6 Coordinates\n\n3.6.1 Changing orientation\nFlip the horizontal bar chart into vertical bar chart by using coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n3.6.2 Changing the data range\nChange the y-axis and x-axis range by using coord_cartesian()\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(formula = y~x , method=lm, linewidth=0.5) +  \n  coord_cartesian(xlim=c(0,100), ylim=c(0,100))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#themes",
    "title": "A Layered Grammar of Graphics: ggplot2 methods",
    "section": "3.7 Themes",
    "text": "3.7 Themes\nBuilt-in themes include: -.(default), -.theme_gray(), -.theme_bw(), -.theme_classic(), -.theme_minimal()\n\ntheme_graytheme_bwtheme_classictheme_minimal\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex01",
      "A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "Show the code: load R packages\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\nShow the code: importing data\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#tooltip",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "1.1 Tooltip",
    "text": "1.1 Tooltip\n\n\nCode Demo 1: tooltip\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n        geom_dotplot_interactive(aes(tooltip = ID),\n                                 stackgroups = TRUE,\n                                 binwidth = 1,\n                                 method = \"histodot\") +\n        scale_y_continuous(NULL, \n                           breaks = NULL)\ngirafe(ggobj = p,\n       width_svg = 6,\n       height_svg = 6*0.618)\n\n\n\n\n\n\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nCode Demo 2: custimise tooltip list\n# first, choose variable for tooltip list\nexam_data$tooltip &lt;- c(paste(\"Name = \", exam_data$ID, \n                              \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n   ) +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\nCode Demo 3: custimise tooltip style\n# first, design tooltip\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\nCode Demo 4: tooltip with calculated data\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\nIn this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\n\n\n\n\nNote\n\n\n\nThe “mean_se” function calculates the mean and standard error, and as a result, the length of the error bars is based on the standard error. The standard error measures the difference between the sample mean and the true population mean. Therefore, a larger standard error indicates that the sample mean may not accurately estimate the population mean, leading to longer error bars. Conversely, a smaller standard error suggests that the sample mean is relatively accurate, resulting in shorter error bars.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#hover-effect-data_id",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#hover-effect-data_id",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "1.2 Hover effect: data_id",
    "text": "1.2 Hover effect: data_id\n\n\nCode Demo 1: data_id\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(  \n    aes(data_id = CLASS, tooltip = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange”.\n\n\n\n\nCode Demo 2: data_id with custimised hover style\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\nCode Demo 3: comebine toolip and hover effect\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#onclick",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "1.3 onclick",
    "text": "1.3 onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n\n\nCode Demo 1: onclick\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "1.4 Coordinated Multiple Views",
    "text": "1.4 Coordinated Multiple Views\n\n\nCode Demo 1: Coordinated Multiple Views\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#plot_ly",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "2.1 plot_ly()",
    "text": "2.1 plot_ly()\n\n\nCode Demo: plot_ly()\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\nInteractive: click on the color symbol at the legend.\nColor argument is mapped to a qualitative visual variable (i.e. RACE).",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#ggplotly",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "2.2 ggplotly()",
    "text": "2.2 ggplotly()\n\n\nCode Demo: ggplotly()\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03(1).html#coordinated-multiple-views-1",
    "title": "Programming Interactive Data Visualisation with R",
    "section": "2.3 Coordinated Multiple Views",
    "text": "2.3 Coordinated Multiple Views\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\nCode Demo: Coordinated Multiple Views\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThing to learn from the code chunk above:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex03",
      "Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html",
    "title": "Visualising Distribution: Ridgeline Plot & Raincloud Plot",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1 we have shared with you some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share with you two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.",
    "crumbs": [
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Distribution: Ridgeline Plot & Raincloud Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#create-plot-by-geom_density_ridges",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#create-plot-by-geom_density_ridges",
    "title": "Visualising Distribution: Ridgeline Plot & Raincloud Plot",
    "section": "2.1 Create plot by geom_density_ridges()",
    "text": "2.1 Create plot by geom_density_ridges()\nrefer to this link for geom_density_ridges()\n\n\nShow the code: making ridgeline plot by geom_density_ridges()\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 4,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()",
    "crumbs": [
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Distribution: Ridgeline Plot & Raincloud Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#design-color-of-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#design-color-of-ridgeline-plot",
    "title": "Visualising Distribution: Ridgeline Plot & Raincloud Plot",
    "section": "2.2 Design color of ridgeline plot",
    "text": "2.2 Design color of ridgeline plot\n\n2.2.1 Fill gradients along the x axis\n\n\nShow the code: fill color by geom_density_ridges_gradient()\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Student Score\",\n                       option = \"H\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = \"Class\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nDesign color by geom_density_ridges_gradient()or geom_ridgeline_gradient()\nFor example, in the code chunk above:\ngeom_density_ridges_gradient( scale = 3, rel_min_height = 0.01) +\nscale_fill_viridis_c(name = \"Temp. [F]\", option = \"H\")\n\n\n\n\n2.2.2 Mapping the probabilities directly onto color\n\n\nShow the code: fill color by stat_density_ridges()\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges().\n\n\n\n\n2.2.3 Ridgeline plots with quantile lines\n\n\nShow the code: fill quantile lines(quantiles = 4)\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot.\n\n\nShow the code: fill quantile lines(cut points)\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\nPicking joint bandwidth of 3.18",
    "crumbs": [
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Distribution: Ridgeline Plot & Raincloud Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#steps-for-creating-a-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#steps-for-creating-a-raincloud-plot",
    "title": "Visualising Distribution: Ridgeline Plot & Raincloud Plot",
    "section": "3.1 Steps for creating a raincloud plot",
    "text": "3.1 Steps for creating a raincloud plot\n\n3.1.1 Making half-eye plot\n\n\nShow the code: making half-eye plot by stat_halfeye()\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  theme_clean() +\n  theme(plot.background = element_rect(fill = \"white\", color = NA),  \n        panel.background = element_rect(fill = \"white\", color = NA))\n\n\n\n\n\n\n\n\n\n\n\n3.1.2 Adding the boxplot with geom_boxplot()\n\n\nShow the code: add boxplot next to half-eye plot\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)+\n  theme_clean() +\n  theme(plot.background = element_rect(fill = \"white\", color = NA),  \n        panel.background = element_rect(fill = \"white\", color = NA))\n\n\n\n\n\n\n\n\n\n\n\n3.1.3 Adding the Dot Plots with stat_dots()\n\n\nShow the code: add dot plots\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2) +\n  theme_clean() +\n  theme(plot.background = element_rect(fill = \"white\", color = NA),  \n        panel.background = element_rect(fill = \"white\", color = NA))",
    "crumbs": [
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Distribution: Ridgeline Plot & Raincloud Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#design-the-raincload-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(1).html#design-the-raincload-plot",
    "title": "Visualising Distribution: Ridgeline Plot & Raincloud Plot",
    "section": "3.2 Design the raincload plot",
    "text": "3.2 Design the raincload plot\nFlip the raincloud chart and apply another theme to make the raincloud plot more beautiful.\n\n\nShow the code: filp the chart and apply theme\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()",
    "crumbs": [
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Distribution: Ridgeline Plot & Raincloud Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html",
    "title": "Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#plotting-standard-error-bars-of-point-estimates",
    "title": "Visualising Uncertainty",
    "section": "2.1 Plotting standard error bars of point estimates",
    "text": "2.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\n\nShow the code: Plotting standard error bars of point estimates\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#plotting-confidence-interval-of-point-estimates",
    "title": "Visualising Uncertainty",
    "section": "2.2 Plotting confidence interval of point estimates",
    "text": "2.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\n\nShow the code: Plotting confidence interval of point estimates\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Uncertainty"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04(3).html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Visualising Uncertainty",
    "section": "2.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "2.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\n\nShow the code: Visualizing the uncertainty of point estimates with interactive error bars\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex04",
      "Visualising Uncertainty"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#loading-r-packages",
    "title": "Importing Data in R",
    "section": "Loading R packages",
    "text": "Loading R packages\nIn this hands-on exercise, two R packages will be used. They are: tidyverse, and haven.\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse,haven)",
    "crumbs": [
      "Home",
      "In-class Exercise",
      "In Class Ex01",
      "Importing Data in R"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "Importing Data in R",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data (Student questionnaire data file) into environment.\n\nstu_qqq&lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\nFilter the table using filter()\n\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT == \"SGP\")\n\nWrite records into the data file.\n\nwrite_rds(stu_qqq_SG, \"data/stu_qqq_SG.rds\")\n\nRead data file.\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")",
    "crumbs": [
      "Home",
      "In-class Exercise",
      "In Class Ex01",
      "Importing Data in R"
    ]
  },
  {
    "objectID": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class_Ex/In-class_Ex03/In-class_Ex03.html",
    "title": "Tableau02: Make Dashboard & Story",
    "section": "",
    "text": "Exercise01: Make dashboards in Tableau\nIn-class_Ex03: Math vs English\nIn-class_Ex03: Superstore Sales and Profit Dashboard\n\n\n\nExercise02: Make story in Tableau\nIn-class_Ex03: Superstore Sales and Profit Story\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Home",
      "In-class Exercise",
      "In Class Ex03",
      "Tableau02: Make Dashboard & Story"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "",
    "text": "Show the code: load R packages\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse, haven)",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#mean-of-plausible-values",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#mean-of-plausible-values",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "3.1 Mean of Plausible Values",
    "text": "3.1 Mean of Plausible Values\nCalculate the PV mean for each subject to obtain the representative score for each subject. Add the mean scores of the three subjects and take the average to derive the representative score for the overall knowledge performance.\nWe can get a glimpse of the calculation results from the following output:\n\n\nShow the code\nAvg_PVMath &lt;- rowMeans(stu_qqq_SG[, c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")])\n\nAvg_PVRead &lt;- rowMeans(stu_qqq_SG[, c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")])\n\nAvg_PVScience &lt;- rowMeans(stu_qqq_SG[, c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")])\n\nPV_Avg &lt;- data.frame(\n  CNTSTUID = stu_qqq_SG$CNTSTUID,\n  Avg_PVMath = Avg_PVMath,\n  Avg_PVRead = Avg_PVRead,\n  Avg_PVScience = Avg_PVScience\n)\n\nPV_Avg$Avg_PVOverall &lt;- rowMeans(PV_Avg[, c(\"Avg_PVMath\", \"Avg_PVRead\", \"Avg_PVScience\")], na.rm = TRUE)\n\nwrite_rds(PV_Avg, \"data/stu_qqq_SG_PV_Avg.rds\")\n\nhead(PV_Avg)\n\n\n  CNTSTUID Avg_PVMath Avg_PVRead Avg_PVScience Avg_PVOverall\n1 70200001   605.2533   667.4296      639.7873      637.4901\n2 70200002   689.9528   627.6078      672.0703      663.2103\n3 70200003   676.7768   582.9252      660.0384      639.9135\n4 70200004   401.0528   361.3969      343.6425      368.6974\n5 70200005   436.1151   475.6763      479.2390      463.6768\n6 70200006   518.1055   431.4652      476.0031      475.1913\n\n\nEach student’s Avg_PVMath, Avg_PVRead, and Avg_PVScience values reflect their performance in math, reading, and science, respectively. Avg_PVOverall represents student’s overall knowledge performance. For example, the first row above shows the performance scores of math, reading and science for student “70200001” is 605.2533, 667.4296, 639.7873, respectively. The overall knowledge performance score of student “70200001” is 637.4901.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-performance-scores",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-performance-scores",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "3.2 Distribution of Performance Scores",
    "text": "3.2 Distribution of Performance Scores\n\n3.2.1 One Subject\nFirst, let’s see the frequency of the performance scores by subjects.\nHistogram\n\n\nShow the code\np1 &lt;- ggplot(data = PV_Avg, aes(x=Avg_PVMath)) +\n        geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n        geom_vline(aes(xintercept = mean(Avg_PVMath), linetype=\"Mean\", color=\"Mean\"), linewidth=0.5) +\n        geom_vline(aes(xintercept = median(Avg_PVMath), linetype=\"Median\", color=\"Median\"), linewidth=0.5) +\n        scale_linetype_manual(name = \"Statistic\", values = c(Mean = \"dashed\", Median = \"dashed\")) +\n        scale_color_manual(name = \"Statistic\", values = c(Mean = \"blue\", Median = \"red\")) +\n        ggtitle(\"Frequency of Math Scores\") +\n        labs(color = \"Statistic\", x=\"Math Score\", size = 3) + \n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\n\np2 &lt;- ggplot(data = PV_Avg, aes(x=Avg_PVRead)) +\n        geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n        geom_vline(aes(xintercept = mean(Avg_PVRead), linetype=\"Mean\", color=\"Mean\"), linewidth=0.5) +\n        geom_vline(aes(xintercept = median(Avg_PVRead), linetype=\"Median\", color=\"Median\"), linewidth=0.5) +\n        scale_linetype_manual(name = \"Statistic\", values = c(Mean = \"dashed\", Median = \"dashed\")) +\n        scale_color_manual(name = \"Statistic\", values = c(Mean = \"blue\", Median = \"red\")) +\n        ggtitle(\"Frequency of Reading Scores\") +\n        labs(color = \"Statistic\", x = \"Reading Score\", size = 3) + \n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\n\np3 &lt;- ggplot(data = PV_Avg, aes(x=Avg_PVScience)) +\n        geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n        geom_vline(aes(xintercept = mean(Avg_PVScience), linetype=\"Mean\", color=\"Mean\"), linewidth=0.5) +\n        geom_vline(aes(xintercept = median(Avg_PVScience), linetype=\"Median\", color=\"Median\"), linewidth=0.5) +\n        scale_linetype_manual(name = \"Statistic\", values = c(Mean = \"dashed\", Median = \"dashed\")) +\n        scale_color_manual(name = \"Statistic\", values = c(Mean = \"blue\", Median = \"red\")) +\n        ggtitle(\"Frequency of Science Scores\") +\n        labs(color = \"Statistic\", x=\"Science Scores\", size = 3) + \n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\n\np4 &lt;- ggplot(data = PV_Avg, aes(x=Avg_PVOverall)) +\n        geom_histogram(bins=20, boundary = 100, color=\"grey25\", fill=\"grey90\") +\n        geom_vline(aes(xintercept = mean(Avg_PVOverall), linetype=\"Mean\", color=\"Mean\"), linewidth=0.5) +\n        geom_vline(aes(xintercept = median(Avg_PVOverall), linetype=\"Median\", color=\"Median\"), linewidth=0.5) +\n        scale_linetype_manual(name = \"Statistic\", values = c(Mean = \"dashed\", Median = \"dashed\")) +\n        scale_color_manual(name = \"Statistic\", values = c(Mean = \"blue\", Median = \"red\")) +\n        ggtitle(\"Frequency of Overall Knowledge Performance Scores\") +\n        labs(color = \"Statistic\", x=\"Overall Knowledge Performance Scores\", size = 3) + \n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\np1+p2+p3+p4\n\n\n\n\n\n\n\n\n\nThe four histograms above all illustrate a left-skewed distribution, indicating that the scores are concentrated around higher values. Additionally, the dashed line in the graphs shows a mean score lower than the median. This could be attributed to some students with extremely low scores, pulling down the mean.\nBox plot\n\n\nShow the code\nPV_Avg_tidy &lt;- PV_Avg %&gt;%\n  pivot_longer(cols = c(Avg_PVMath, Avg_PVRead, Avg_PVScience, Avg_PVOverall), names_to = \"Subject\", values_to = \"Score\")\n\nmax_values &lt;- PV_Avg_tidy %&gt;% group_by(Subject) %&gt;% summarise(max_value = max(Score))\n\nggplot(PV_Avg_tidy, aes(x = Subject, y = Score)) +\n  geom_boxplot(fill = \"forestgreen\", color = \"white\") +\n  facet_grid(. ~ Subject, scales = \"free_x\") +\n  geom_hline(data = max_values, aes(yintercept = max_value, linetype = \"Max\"), color = \"yellow\", show.legend = FALSE, linewidth = 0.8) +\n  geom_text(data = max_values, aes(x = Subject, y = max_value, label = sprintf(\"Maximum: %.2f\", max_value)), size = 3, vjust = -0.5, hjust = 0.5, color = \"yellow\") +\n  geom_hline(aes(yintercept = median(Score), linetype = \"Median\"), color = \"red\",show.legend = FALSE, linewidth = 0.8) +\n  coord_cartesian(ylim = range(PV_Avg_tidy$Score)) +\n  ggtitle(\"Box Plots of Performance Scores\") + \n  theme_dark()\n\n\n\n\n\n\n\n\n\nThe four box plots reveal:\n\nSome students scored extremely low, especially in reading, followed by science and math.\nMedian scores follow the order: Math &gt; Science ≈ Overall &gt; Reading.\nMaximum scores follow the order: Math &gt; Science &gt; Reading &gt; Overall.\nOver 75% of students scored above 500 in math, and 75% of students scored above 500 in science, while less than 75% scored above 500 in reading. Nearly 75% of students scored above 500 in overall knowledge performance, with a few extremely low scorers below 300.\n\nNext, by using density curve, we can see more of the distribution and central tendency of the performance scores.\nDensity curve\n\n\nShow the code\n  peak_math &lt;- density(PV_Avg$Avg_PVMath)$x[which.max(density(PV_Avg$Avg_PVMath)$y)]\n  peak_read &lt;- density(PV_Avg$Avg_PVRead)$x[which.max(density(PV_Avg$Avg_PVRead)$y)]\n  peak_science &lt;- density(PV_Avg$Avg_PVScience)$x[which.max(density(PV_Avg$Avg_PVScience)$y)]\n  peak_overall &lt;- density(PV_Avg$Avg_PVOverall)$x[which.max(density(PV_Avg$Avg_PVOverall)$y)]\n  \nggplot(data = PV_Avg) +\n  geom_density(aes(x = Avg_PVMath, color = \"Math\"), fill = \"darkblue\", alpha = 0.5) +\n  geom_density(aes(x = Avg_PVRead, color = \"Reading\"), fill = \"darkgreen\", alpha = 0.5) +\n  geom_density(aes(x = Avg_PVScience, color = \"Science\"), fill = \"darkred\", alpha = 0.5) +\n  geom_density(aes(x = Avg_PVOverall, color = \"Overall\"), fill = \"orange\", alpha = 0.5) +\n  ggtitle(\"Density of Performance Scores\") +\n  labs(x = \"Average of PV\") +\n  geom_vline(aes(xintercept = peak_math, color = \"Math\"), linetype = \"dashed\", linewidth = 1) +\n  geom_vline(aes(xintercept = peak_read, color = \"Reading\"), linetype = \"dashed\", linewidth = 1) +\n  geom_vline(aes(xintercept = peak_science, color = \"Science\"), linetype = \"dashed\", linewidth = 1) +\n  geom_vline(aes(xintercept = peak_overall, color = \"Overall\"), linetype = \"dashed\", linewidth = 1) +\n  geom_text(aes(x = peak_math, y = 0, label = sprintf(\"Math: %.2f\", peak_math)), \n            vjust = - 0.5, hjust = 0.2, color = \"royalblue\", size = 3.5) +\n  geom_text(aes(x = peak_read, y = 0, label = sprintf(\"Reading: %.2f\", peak_read)), \n            vjust = - 3.5, hjust = 0.2, color = \"lightgreen\", size = 3.5) +\n  geom_text(aes(x = peak_science, y = 0, label = sprintf(\"Science: %.2f\", peak_science)),\n            vjust = - 8, hjust = 0.2, color = \"tomato\", size = 3.5) +\n  geom_text(aes(x = peak_overall, y = 0, label = sprintf(\"Overall: %.2f\", peak_overall)),\n            vjust = - 12, hjust = 0.5, color = \"yellow\", size = 3.5) +\n  scale_color_manual(values = c(\"Math\" = \"royalblue\", \"Reading\" = \"lightgreen\", \"Science\" = \"tomato\", \"Overall\" = \"yellow\"), name = \"Subject\") +\n  theme_classic() +\n  labs(x = \"Score\", y = \"Density\") +\n  theme(\n    legend.position = c(0.9, 0.8),\n    legend.text = element_text(size = 8),\n    legend.key.size = unit(5, \"mm\")\n  )\n\n\n\n\n\n\n\n\n\nThe four density curves above reveal:\n\nThe performance for all three subjects and overall show a tendency towards a leftward skew in their distributions.\nMath scores are centered around 600, science scores around 580, and reading scores around 560. Overall, students’ knowledge performance scores are centered around 590.\n\nLast, let’s present the distribution of performance scores by violin plots.\nViolin plot\n\n\nShow the code\nggplot(data = PV_Avg) +\n  geom_violin(aes(x = \"Math\", y = Avg_PVMath, fill = \"Math\"), position = \"dodge\") +\n  geom_violin(aes(x = \"Reading\", y = Avg_PVRead, fill = \"Reading\"), position = \"dodge\") +\n  geom_violin(aes(x = \"Science\", y = Avg_PVScience, fill = \"Science\"), position = \"dodge\") +\n  geom_violin(aes(x = \"Overall\", y = Avg_PVOverall, fill = \"Overall\"), position = \"dodge\") +\n  ggtitle(\"Violin Plot of Performance Scores\") +\n  labs(x = \"Subject\", y = \"Score\", fill = \"Subject\") +\n  theme_classic() \n\n\n\n\n\n\n\n\n\nThe similarity in the thickness of the violin plots above suggests that the scores for mathematics, reading, science, and overall performance share a certain degree of similarity in the central tendency and dispersion of their data distributions. However, the violin plot for reading exhibits a noticeably longer tail, indicating that the values for reading scores in the tail are relatively scattered, with the presence of more outliers. In contrast, the tails for the other two subjects as well as the overall scores are shorter, indicating a relatively concentrated distribution of data in the lower score range.\n\n\n3.2.2 Two Subjects\nNow, let’s see if there is any correlation between the scores in any two subjects.\n\n\nShow the code\np5 &lt;- ggplot(data = PV_Avg, \n             aes(x = Avg_PVMath, \n                 y = Avg_PVRead)) +\n        geom_point(color = \"royalblue\") +\n        geom_smooth(formula = y ~ x, method = lm, color = \"black\") +\n        geom_text(aes(x = max(Avg_PVMath), y = max(Avg_PVRead),\n                      label = paste(\"y = \", round(coef(lm(Avg_PVRead ~ Avg_PVMath))[2], 2), \"x + \", round(coef(lm(Avg_PVRead ~ Avg_PVMath))[1], 2))),\n                  hjust = 1.5, vjust = 1, color = \"black\", size = 4) +\n        ggtitle(\"Math vs Reading\") +\n        labs(x = \"Math Score\", y = \"Reading Score\", color = \"Math Score\") +\n        theme_classic()\np6 &lt;- ggplot(data = PV_Avg, \n             aes(x = Avg_PVMath, \n                 y = Avg_PVScience)) +\n        geom_point(color = \"forestgreen\") +\n        geom_smooth(formula = y ~ x, method = lm, color = \"black\") +\n        geom_text(aes(x = max(Avg_PVMath), y = max(Avg_PVScience),\n                      label = paste(\"y = \", round(coef(lm(Avg_PVScience ~ Avg_PVMath))[2], 2), \"x + \", round(coef(lm(Avg_PVScience ~ Avg_PVMath))[1], 2))),\n                  hjust = 1.5, vjust = 1, color = \"black\", size = 4) +\n        ggtitle(\"Math vs Science\") +\n        labs(x = \"Math Score\", y = \"Science Score\", color = \"Math Score\") +\n        theme_classic()\np7 &lt;- ggplot(data = PV_Avg, \n             aes(x = Avg_PVRead, \n                 y = Avg_PVScience)) +\n        geom_point(color = \"tomato\") +\n        geom_smooth(formula = y ~ x, method = lm, color = \"black\") +\n        geom_text(aes(x = max(Avg_PVRead), y = max(Avg_PVScience),\n                      label = paste(\"y = \", round(coef(lm(Avg_PVScience ~ Avg_PVRead))[2], 2), \"x + \", round(coef(lm(Avg_PVScience ~ Avg_PVRead))[1], 2))),\n                  hjust = 1.5, vjust = 1, color = \"black\", size = 4) +\n        ggtitle(\"Reading vs Science\") +\n        labs(x = \"Reading Score\", y = \"Science Score\", color = \"Reading Score\") +\n        theme_classic()\n\np5/p6|p7\n\n\n\n\n\n\n\n\n\nFrom the above three plots and their respective fit curves, it can be observed that the scores of the three subjects are positively correlated in pairs. As the scores in math increase, the scores in reading and science also increase, with science scores being higher. Similarly, when reading scores are higher, science scores also tend to be higher.\n\n\n3.2.3 Three Subjects\nNext, let’s see if there is any relationship among three subject’s scores.\n\nMath vs Reading with ScienceMath vs Science with ReadingReading vs Science with Math\n\n\n\n\nShow the code\nggplot(data = PV_Avg, \n       aes(x = Avg_PVMath, \n           y = Avg_PVRead, \n           color = Avg_PVScience)) +\n  geom_point() +\n  ggtitle(\"Math vs Reading with Science\") +\n  labs(x = \"Math Score\", y = \"Reading Score\", color = \"Science Score\") +\n  theme_clean()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg, \n       aes(x = Avg_PVMath, \n           y = Avg_PVScience, \n           color = Avg_PVRead)) +\n  geom_point() +\n  ggtitle(\"Math vs Science with Reading\") +\n  labs(x = \"Math Score\", y = \"Science Score\", color = \"Reading Score\") +\n  scale_color_continuous(\"Reading Score\", breaks = seq(200, 800, by = 100), \n                          low = \"darkgreen\", high = \"lightgreen\") +\n  theme_clean()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg, \n       aes(x = Avg_PVRead, \n           y = Avg_PVScience, \n           color = Avg_PVMath)) +\n  geom_point() +\n  ggtitle(\"Reading vs Science with Math\") +\n  labs(x = \"Reading Score\", y = \"Science Score\", color = \"Math Score\") +\n  scale_color_continuous(\"Math Score\", breaks = seq(200, 800, by = 100), \n                          low = \"red\", high = \"pink\") +\n  theme_clean()\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the three colored scatter plots above, we can observe a positive trend: as the scores of any two subjects increase, the score of the third subject also tends to rise. This is visually represented by lighter colors and higher values towards the upper right corner. Conversely, when the scores of any two subjects decrease, the score of the third subject tends to decrease as well, reflected in darker colors and lower values towards the lower left corner. This pattern suggests a positive correlation among the performance scores of the three subjects, highlighting that higher scores in one subject are associated with higher scores in the others.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "3.3 Summary",
    "text": "3.3 Summary\nAfter analyzing the distribution of scores in different subjects, we can draw the following conclusions:\n\nSingaporean students excel in mathematics, followed by science, with reading being the subject where they perform least well.\nThere is a correlation between the scores in the three subjects; in general, students with higher scores tend to perform well across all three subjects, while students with lower scores tend to have lower scores in all three subjects.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#gender",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "4.1 Gender",
    "text": "4.1 Gender\nLet’s incorporate the gender indicator into the analysis.\n\n\nShow the code\nPV_Avg_gender &lt;- cbind(PV_Avg, gender = stu_qqq_SG$ST004D01T)\nwrite_rds(PV_Avg_gender, \"data/stu_qqq_SG_PV_Avg_gender.rds\")\nhead(PV_Avg_gender)\n\n\n  CNTSTUID Avg_PVMath Avg_PVRead Avg_PVScience Avg_PVOverall gender\n1 70200001   605.2533   667.4296      639.7873      637.4901      1\n2 70200002   689.9528   627.6078      672.0703      663.2103      2\n3 70200003   676.7768   582.9252      660.0384      639.9135      2\n4 70200004   401.0528   361.3969      343.6425      368.6974      2\n5 70200005   436.1151   475.6763      479.2390      463.6768      1\n6 70200006   518.1055   431.4652      476.0031      475.1913      1\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the student questionnaire data set, the column “ST004D01T” records student’s gender, “1” represent female, “2” represent male. In the student questionnaire, the question “ST004Q01TA” represents student’s gender.\n\n\n\n4.1.1 Analyse\nlet’s see the frequency of performance scores in each subjects by gender.\n\n\nShow the code\np8 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVMath, \n                 fill = as.factor(gender))) +\n        geom_histogram(bins = 20, \n                       color = \"black\") +\n        scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                          breaks = c(\"1\", \"2\"), \n                          labels = c(\"Female\", \"Male\")) +\n        labs(fill = \"Gender\", x = \"Math Score\") +\n        ggtitle(\"Frequency of Math Scores by Gender\") +\n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\np9 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVRead, \n                 fill = as.factor(gender))) +\n        geom_histogram(bins = 20, \n                       color = \"black\") +\n        scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                          breaks = c(\"1\", \"2\"), \n                          labels = c(\"Female\", \"Male\")) +\n        labs(fill = \"Gender\", x = \"Reading Score\") +\n        ggtitle(\"Frequency of Reading Scores by Gender\") +\n        theme_classic() + \n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\np10 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVScience, \n                 fill = as.factor(gender))) +\n        geom_histogram(bins = 20, \n                       color = \"black\") +\n        scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                          breaks = c(\"1\", \"2\"), \n                          labels = c(\"Female\", \"Male\")) +\n        labs(fill = \"Gender\", x = \"Science Score\") +\n        ggtitle(\"Frequency of Science Scores by Gender\") +\n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\np11 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVOverall, \n                 fill = as.factor(gender))) +\n        geom_histogram(bins = 20, \n                       color = \"black\") +\n        scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                          breaks = c(\"1\", \"2\"), \n                          labels = c(\"Female\", \"Male\")) +\n        labs(fill = \"Gender\", x = \"Overall Score\") +\n        ggtitle(\"Frequency of Overall Scores by Gender\") +\n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8))  \n\np8+p9+p10+p11\n\n\n\n\n\n\n\n\n\nFrom the three histograms above:\n\nMale and female performances are fairly balanced in all three subjects and overall, with similar lengths of the bars across most score ranges, except for scores above 700.\nIn the high-score range (above 700), particularly near 800, by observing the lengths of the bars, it can be seen that there are more males excelling in math, science and overall, while females excel in reading.\n\nNext, let’s explore more by density curve.\n\n\nShow the code\np12 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVMath, \n                 color = as.factor(gender))) +\n        geom_density(alpha = 0, linewidth = 0.8) +\n        scale_color_manual(values = c(\"1\" = \"deeppink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n        labs(color = \"Gender\", x = \"Math Score\") +\n        ggtitle(\"Distribution of Math Scores by Gender\") +\n        theme_classic()+\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8)) \n\np13 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVRead, \n                 color = as.factor(gender))) +\n        geom_density(alpha = 0, linewidth = 0.8) +\n        scale_color_manual(values = c(\"1\" = \"deeppink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n        labs(color = \"Gender\", x = \"Reading Score\") +\n        ggtitle(\"Distribution of Reading Scores by Gender\") +\n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8)) \n          \np14 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVScience, \n                 color = as.factor(gender))) +\n        geom_density(alpha = 0, linewidth = 0.8) +\n        scale_color_manual(values = c(\"1\" = \"deeppink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n        labs(color = \"Gender\", x = \"Science Score\") +\n        ggtitle(\"Distribution of Science Scores by Gender\") +\n        theme_classic() +\n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8)) \n          \np15 &lt;- ggplot(data = PV_Avg_gender, \n             aes(x = Avg_PVOverall, \n                 color = as.factor(gender))) +\n        geom_density(alpha = 0, linewidth = 0.8) +\n        scale_color_manual(values = c(\"1\" = \"deeppink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n        labs(color = \"Gender\", x = \"Overall Score\") +\n        ggtitle(\"Distribution of Overall Scores by Gender\") +\n        theme_classic() +       \n          theme(\n            plot.title = element_text(size = 8),\n            axis.title = element_text(size = 8),  \n            legend.text = element_text(size = 8),  \n            legend.title = element_text(size = 8)) \n          \np12+p13+p14+p15   \n\n\n\n\n\n\n\n\n\nFrom the above four density curves, we can get the following observation:\n\nBoth male and female students exhibit a left-skewed trend in their performance scores across the three subjects and overall.\nIn terms of math performance, female scores being concentrated around 600, while male scores are concentrated around 650 suggests that, on average, males tend to achieve slightly higher scores in math compared to females.\nRegarding reading performance, the concentration of both male and female scores around 550-600, approximately at 580, suggests that there is a similarity in the average performance of both genders in Reading. However, the observed differences in the lower and higher score ranges indicate certain gender-related patterns. The larger area under the curve below 500 for males implies that more male students fall into the lower score range (&lt;500). Conversely, the larger area above 600 for females suggests that more female students achieve scores in the higher range (&gt;600).\nIn science performance, the concentration of female scores below 600 (around 580), and male scores above 600 (around 610), indicates that, on average, the majority of male students outperform the majority of female students in Science. The larger area under the curve above 600 for males in the higher score range further supports this observation, suggesting that more male students achieve scores in the upper range (&gt;600) compared to females.\nIn math, science, and overall performance, the distribution of male scores is more left-skewed compared to the distribution of female scores. This indicates that, in these subjects, male scores are relatively concentrated at higher levels. A left-skewed distribution suggests that the majority of students achieve higher scores, with relatively fewer lower scores. This implies that, overall, male students tend to perform more prominently in the higher score ranges in math, science, and overall performance.\n\nThe following set of violin plots offers a clearer comparison:\n\n\nShow the code\np16 &lt;- ggplot(data = PV_Avg_gender, \n              aes(x = as.factor(gender), y = Avg_PVMath, fill = as.factor(gender))) +\n         geom_violin(trim = FALSE) +\n         geom_boxplot(width = 0.1, fill = \"white\", color = \"black\") +\n         scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n         labs(fill = \"Gender\", x = NULL, y = \"Math Score\") +\n         ggtitle(\"Distribution of Math Scores by Gender\") +\n         theme_classic() +\n         theme(\n           plot.title = element_text(size = 8),\n           axis.title = element_text(size = 8),  \n           legend.text = element_text(size = 8),  \n           legend.title = element_text(size = 8)) \n\np17 &lt;- ggplot(data = PV_Avg_gender, \n              aes(x = as.factor(gender), y = Avg_PVRead, fill = as.factor(gender))) +\n         geom_violin(trim = FALSE) +\n         geom_boxplot(width = 0.1, fill = \"white\", color = \"black\") +\n         scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n         labs(fill = \"Gender\", x = NULL, y = \"Reading Score\") +\n         ggtitle(\"Distribution of Reading Scores by Gender\") +\n         theme_classic() +\n         theme(\n           plot.title = element_text(size = 8),\n           axis.title = element_text(size = 8),  \n           legend.text = element_text(size = 8),  \n           legend.title = element_text(size = 8)) \n\np18 &lt;- ggplot(data = PV_Avg_gender, \n              aes(x = as.factor(gender), y = Avg_PVScience, fill = as.factor(gender))) +\n         geom_violin(trim = FALSE) +\n         geom_boxplot(width = 0.1, fill = \"white\", color = \"black\") +\n         scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n         labs(fill = \"Gender\", x = NULL, y = \"Science Score\") +\n         ggtitle(\"Distribution of Science Scores by Gender\") +\n         theme_classic() +\n         theme(\n           plot.title = element_text(size = 8),\n           axis.title = element_text(size = 8),  \n           legend.text = element_text(size = 8),  \n           legend.title = element_text(size = 8)) \n\n\n\np19 &lt;- ggplot(data = PV_Avg_gender, \n              aes(x = as.factor(gender), y = Avg_PVOverall, fill = as.factor(gender))) +\n         geom_violin(trim = FALSE) +\n         geom_boxplot(width = 0.1, fill = \"white\", color = \"black\") +\n         scale_fill_manual(values = c(\"1\" = \"pink\", \"2\" = \"dodgerblue\"), \n                           breaks = c(\"1\", \"2\"), \n                           labels = c(\"Female\", \"Male\")) +\n         labs(fill = \"Gender\", x = NULL, y = \"Overall Score\") +\n         ggtitle(\"Distribution of Overall Scores by Gender\") +\n         theme_classic() +       \n         theme(\n           plot.title = element_text(size = 8),\n           axis.title = element_text(size = 8),  \n           legend.text = element_text(size = 8),  \n           legend.title = element_text(size = 8)) \n\n\n\n\np16 + p17 + p18 + p19\n\n\n\n\n\n\n\n\n\nThe violin plots for male students in math, science, and overall performance exhibit characteristics of narrower and more concentrated distributions, especially with higher scores corresponding to the widest part. This suggests that male students’ scores in these subjects are more consistent and concentrated, with a substantial portion achieving higher scores. The narrowness of the plots indicates relatively small variability in scores among male students, signifying a more uniform performance. In the widest part of the violin plot, it demonstrates that a considerable number of males perform well within this score range, further emphasizing the trend of males exhibiting concentrated and superior performance in mathematics, science, and overall academic achievement.\nIn contrast, concerning reading, the violin plots for both male and female students are generally similar, but the female plot has higher scores corresponding to the widest part. This implies that female students generally demonstrate a more balanced performance in reading, with a relatively larger proportion of females achieving higher scores. While both plots share similar overall trends, females may have a higher average score and more instances of high performance in reading. This difference reflects the relative advantage of females in reading, showcasing a more outstanding reading ability or higher academic proficiency.\n\n\n4.1.2 Summary\nBased on the above analysis, we can draw the conclusion that in math, science, and overall performance, males outperform females, with a greater number achieving higher scores. In reading, the performance difference between males and females is not significant, but there tends to be a higher number of females in the high-scoring range.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#school",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#school",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "4.2 School",
    "text": "4.2 School\nNext, incorporating “School ID” into the analysis.\n\n\n\n\n\n\nNote\n\n\n\nIn the student questionnaire data set, the column “CNTSCHID” represents School ID.\n\n\n\n\nShow the code\nPV_Avg_school &lt;- cbind(PV_Avg, School_ID = stu_qqq_SG$CNTSCHID)\nwrite_rds(PV_Avg_school, \"data/stu_qqq_SG_PV_Avg_school.rds\")\nhead(PV_Avg_school)\n\n\n  CNTSTUID Avg_PVMath Avg_PVRead Avg_PVScience Avg_PVOverall School_ID\n1 70200001   605.2533   667.4296      639.7873      637.4901  70200052\n2 70200002   689.9528   627.6078      672.0703      663.2103  70200134\n3 70200003   676.7768   582.9252      660.0384      639.9135  70200112\n4 70200004   401.0528   361.3969      343.6425      368.6974  70200004\n5 70200005   436.1151   475.6763      479.2390      463.6768  70200152\n6 70200006   518.1055   431.4652      476.0031      475.1913  70200043\n\n\nThis report will sum up and average the scores of survey participants from the same school to represent the school’s performance score.\n\n\nShow the code\nschool_counts &lt;- PV_Avg_school %&gt;%\n  group_by(School_ID) %&gt;%\n  summarise(STUCount = n_distinct(CNTSTUID))\ndimensions &lt;- dim(school_counts)\ncat(\"The total number of Singaporean schools surveyed in the questionnaire is\", dimensions[1])\n\n\nThe total number of Singaporean schools surveyed in the questionnaire is 164\n\n\nThe code chunk below calculates the mean scores for math, reading, and science, as well as overall performance, for all surveyed students in each school. This process provides representative scores for three subjects and overall performance for each school.\n\n\nShow the code\nPV_Avg_school_group &lt;- PV_Avg_school %&gt;%\n  group_by(School_ID) %&gt;%\n  summarise(\n    Math_Score = mean(Avg_PVMath),\n    Read_Score = mean(Avg_PVRead),\n    Science_Score = mean(Avg_PVScience),\n    Overall_Score = mean(Avg_PVOverall)\n  )\nwrite_rds(PV_Avg_school_group, \"data/stu_qqq_SG_PV_Avg_school_group.rds\")\nhead(PV_Avg_school_group)\n\n\n# A tibble: 6 × 5\n  School_ID Math_Score Read_Score Science_Score Overall_Score\n      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1  70200001       725.       653.          698.          692.\n2  70200002       535.       507.          534.          525.\n3  70200003       740.       665.          714.          706.\n4  70200004       510.       480.          494.          495.\n5  70200005       547.       516.          529.          531.\n6  70200006       487.       468.          477.          477.\n\n\n\n4.2.1 Analyse\nThe following violin plots with accompanying boxes illustrate the distribution of scores in math, reading, science, and overall performance across different schools:\n\n\nShow the code\n# Pivot the data to a longer format\nScore_long &lt;- PV_Avg_school_group %&gt;%\n  pivot_longer(\n    cols = c(\"Math_Score\", \"Read_Score\", \"Science_Score\", \"Overall_Score\"),\n    names_to = \"Score_Type\",\n    values_to = \"Score\"\n  )\n\n# Calculate outliers using the IQR method\noutliers &lt;- Score_long %&gt;%\n  group_by(Score_Type) %&gt;%\n  summarize(\n    lower_limit = quantile(Score, 0.25) - 1.5 * IQR(Score),\n    upper_limit = quantile(Score, 0.75) + 1.5 * IQR(Score)\n  ) %&gt;%\n  left_join(Score_long, by = \"Score_Type\") %&gt;%\n  filter(Score &lt; lower_limit | Score &gt; upper_limit)\n\n# Identify the top 3 and bottom 2 schools for each Score_Type\nselected_schools &lt;- outliers %&gt;%\n  group_by(Score_Type) %&gt;%\n  arrange(desc(Score)) %&gt;%\n  slice_head(n = 3) %&gt;%\n  bind_rows(\n    outliers %&gt;%\n      group_by(Score_Type) %&gt;%\n      arrange(Score) %&gt;%\n      slice_head(n = 2)\n  )\n\n# Custom fill colors\ncustom_fill_colors &lt;- c(\"Math_Score\" = \"#A0E57C\", \n                        \"Read_Score\" = \"#8ABDFF\", \n                        \"Science_Score\" = \"#FFE57F\",\n                        \"Overall_Score\" = \"#FFB7C9\")\n\n# Plot violin plot with selected outlier labels\nggplot(Score_long, aes(x = Score_Type, y = Score, fill = Score_Type)) +\n  geom_violin(trim = FALSE, width = 0.7) + \n  geom_boxplot(width = 0.1, fill = \"white\", color = \"black\") +  # Add boxplot for clarity\n  geom_text_repel(data = selected_schools, aes(label = School_ID), \n                  box.padding = 0.8, point.padding = 0.5, max.iter = 500, size = 3, color = \"black\") +\n  scale_fill_manual(values = custom_fill_colors) +\n  labs(title = \"Distribution of Scores by School\",\n       x = \"Score Type\",\n       y = \"Score\",\n       fill = \"Score Type\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nFrom plots above, we can get the following observation:\n\nThe violin plots for mathematics, reading, science, and overall performance exhibit bi-modal distributions, with a major peak concentrated in the 500-600 range and a minor peak in the 600-700 range. This suggests the presence of two distinct school groups with significantly different performance levels in these subjects and overall, with the larger group having lower performance.\nIn the box plots, the median line within the box for mathematics scores is the highest, indicating a higher median score. This implies that the median performance of students in mathematics is relatively better in Singaporean schools. The median line for science scores is the second-highest, suggesting a relatively higher median performance in science, though not surpassing mathematics. The lowest median line is observed in the box for reading scores, indicating a relatively lower median performance in reading. Overall, it can be inferred that students in Singaporean schools perform better in mathematics compared to science, and science performance is better than reading.\nThree schools, namely “70200001,” “702001010,” and “70200003,” exhibit consistently high scores across subjects and overall performance. On the other hand, two schools, “70200115” and “70200149,” consistently display low scores across all subjects and overall performance.\n\n\n\n4.2.2 Summary\nBased on the previous analysis, we can observe that Singaporean schools can be divided into a group of high-performing schools and a group of low-performing schools. The number of high-performing schools is lower than the number of low-performing schools. Singaporean schools demonstrate a higher level of education in math compared to science and outperform reading. Three prestigious schools in Singapore exhibit outstanding performance.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#socioeconomic-status",
    "title": "Analysis of Singaporean Students’ Performance",
    "section": "4.3 Socioeconomic Status",
    "text": "4.3 Socioeconomic Status\nIn this section, the report will sequentially select “Parent’s Highest Education Level” and “Home Possessions” to represent the analysis of the impact of socioeconomic status on student performance through an examination of their influence on student performance.\n\n4.3.1 Parent’s Highest Education Level\nIn the questionnaire, the educational level of parents is recorded using the ISCED level. This report categorizes the ISCED levels of students’ parents into the following groups: ISCED Level &lt;4, ISCED Level 4, ISCED Level 5, ISCED Level 6, ISCED Level 7, ISCED Level 8. The chart below illustrates the educational levels corresponding to different ISCED levels.\n\n\n\n\n\nComparing the ISCED levels of parents and incorporating the highest level into the analysis, the following code block implements this process:\n\n\nShow the code\n# Mom's edu level\nMomEdu &lt;- cbind(stu_qqq_SG[, c(\"CNTSTUID\", \"ST006Q01JA\", \"ST006Q02JA\", \"ST006Q03JA\", \"ST006Q04JA\", \"ST006Q05JA\")])\n\nget_highest_level &lt;- function(row) {\n  level_column &lt;- grep(\"^ST006Q\", names(row))\n  if (any(!is.na(row[level_column]) & row[level_column] == 1)) {\n    max_level_index &lt;- which.max(row[level_column] == 1)\n    return(9 - max_level_index)\n  } else {\n    return(\"&lt;4\")\n  }\n}\nMomEdu$Mom_Level &lt;- apply(MomEdu, 1, get_highest_level)\n\n# Dad's edu level\nDadEdu &lt;- cbind(stu_qqq_SG[, c(\"CNTSTUID\", \"ST008Q01JA\", \"ST008Q02JA\", \"ST008Q03JA\", \"ST008Q04JA\", \"ST008Q05JA\")])\n\nget_highest_level &lt;- function(row) {\n  level_column &lt;- grep(\"^ST008Q\", names(row))\n  if (any(!is.na(row[level_column]) & row[level_column] == 1)) {\n    max_level_index &lt;- which.max(row[level_column] == 1)\n    return(9 - max_level_index)\n  } else {\n    return(\"&lt;4\")\n  }\n}\nDadEdu$Dad_Level &lt;- apply(DadEdu, 1, get_highest_level)\n\n#Get the highest edu level\nParent_edu_level &lt;- bind_cols(select(MomEdu, CNTSTUID, Mom_Level), select(DadEdu, Dad_Level)) %&gt;%\n  mutate(Parent_highest_level = pmax(Mom_Level, Dad_Level, na.rm = TRUE))\nwrite_rds(Parent_edu_level, \"data/stu_qqq_SG_Parent_edu_level.rds\")\n\nPV_Avg_Parent_edu_highestlevel &lt;- cbind(PV_Avg, Parent_highest_level = Parent_edu_level$Parent_highest_level)\nwrite_rds(PV_Avg_Parent_edu_highestlevel, \"data/stu_qqq_SG_PV_Avg_Parent_edu_highestlevel.rds\")\n\nhead(PV_Avg_Parent_edu_highestlevel)\n\n\n  CNTSTUID Avg_PVMath Avg_PVRead Avg_PVScience Avg_PVOverall\n1 70200001   605.2533   667.4296      639.7873      637.4901\n2 70200002   689.9528   627.6078      672.0703      663.2103\n3 70200003   676.7768   582.9252      660.0384      639.9135\n4 70200004   401.0528   361.3969      343.6425      368.6974\n5 70200005   436.1151   475.6763      479.2390      463.6768\n6 70200006   518.1055   431.4652      476.0031      475.1913\n  Parent_highest_level\n1                    6\n2                    5\n3                   &lt;4\n4                    4\n5                    5\n6                    7\n\n\nLet’s see the distribution of scores by ISCED level:\n\nISCED vs MathISCED vs ReadingISCED vs ScienceISCED vs Overall\n\n\n\n\nShow the code\nggplot(data=PV_Avg_Parent_edu_highestlevel, aes(x = Avg_PVMath, fill = Parent_highest_level)) +\n  geom_density(alpha = 1, color = NA) +\n  facet_grid(Parent_highest_level ~ ., scales = \"free_y\", switch = \"y\") +\n  scale_fill_brewer(palette = \"Blues\") +\n  labs(x = \"Math Score\", fill = \"&lt;ISCED&gt; Level\") +\n  ggtitle(\"Distribution of Math Score by Parent's Highest Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=PV_Avg_Parent_edu_highestlevel, aes(x = Avg_PVRead, fill = Parent_highest_level)) +\n  geom_density(alpha = 1, color = NA) +\n  facet_grid(Parent_highest_level ~ ., scales = \"free_y\", switch = \"y\") +\n  scale_fill_brewer(palette = \"Greens\") +\n  labs(x=\"Reading Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Distribution of Reading Score by Parent's Highest Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=PV_Avg_Parent_edu_highestlevel, aes(x = Avg_PVScience, fill = Parent_highest_level)) +\n  geom_density(alpha = 1, color = NA) +\n  facet_grid(Parent_highest_level ~ ., scales = \"free_y\", switch = \"y\") +\n  scale_fill_brewer(palette = \"Reds\") +\n  labs(x=\"Science Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Distribution of Science Score by Parent's Highest Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data=PV_Avg_Parent_edu_highestlevel, aes(x = Avg_PVOverall, fill = Parent_highest_level)) +\n  geom_density(alpha = 1, color = NA) +\n  facet_grid(Parent_highest_level ~ ., scales = \"free_y\", switch = \"y\") +\n  scale_fill_brewer(palette = \"Purples\") +\n  labs(x=\"Overall Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Distribution of Overall Score by Parent's Highest Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the above plots, we can observe that：\nThrough the observation of central tendencies, students exhibit the highest performance when their parents have an ISCED level of 6 (bachelor’s) and 7 (master’s), spanning across various subjects as well as overall scores. Surprisingly, when parents have an ISCED level of 8 (doctoral), students’ performance in individual subjects and overall is only at a moderate level, resembling the score distribution of students with an ISCED level of 5 (certificate, diploma, and associate degree). Students with parents having an ISCED level of 4 or below demonstrate poorer performance.\nObserving the following violin plots:\n\nISCED vs MathISCED vs ReadingISCED vs ScienceISCED vs Overall\n\n\n\n\nShow the code\nggplot(data = PV_Avg_Parent_edu_highestlevel, aes(x = Parent_highest_level, y = Avg_PVMath, fill = Parent_highest_level)) +\n  geom_violin() +\n  geom_boxplot(width = 0.3, fill = \"white\", color = \"black\", alpha = 1) +\n  scale_fill_brewer(palette = \"Blues\") +\n  labs(x = \"Parent's highest &lt;ISCED&gt; level\", y = \"Math Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Violin Plots with Boxplots of Math Score by Parent's Highest Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg_Parent_edu_highestlevel, aes(x = Parent_highest_level, y = Avg_PVRead, fill = Parent_highest_level)) +\n  geom_violin() +\n  geom_boxplot(width = 0.3, fill = \"white\", color = \"black\", alpha = 1) +\n  scale_fill_brewer(palette = \"Greens\") +\n  labs(x = \"Parent's highest &lt;ISCED&gt; level\", y = \"Math Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Violin Plots with Boxplots of Reading Score by Parent's Highest Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg_Parent_edu_highestlevel, aes(x = Parent_highest_level, y = Avg_PVScience, fill = Parent_highest_level)) +\n  geom_violin() +\n  geom_boxplot(width = 0.3, fill = \"white\", color = \"black\", alpha = 1) +\n  scale_fill_brewer(palette = \"Reds\") +\n  labs(x = \"Parent's highest &lt;ISCED&gt; level\", y = \"Science Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Violin Plots with Boxplots of Science Score by Parent's Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg_Parent_edu_highestlevel, aes(x = Parent_highest_level, y = Avg_PVOverall, fill = Parent_highest_level)) +\n  geom_violin() +\n  geom_boxplot(width = 0.3, fill = \"white\", color = \"black\", alpha = 1) +\n  scale_fill_brewer(palette = \"Purples\") +\n  labs(x = \"Parent's highest &lt;ISCED&gt; level\", y = \"Overall Score\", fill = \"&lt;ISCED&gt; level\") +\n  ggtitle(\"Violin Plots with Boxplots of Overall Score by Parent's Education Level\") +\n  theme_clean() +\n  theme(\n    plot.title = element_text(size = 12)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nWe can observe the following from the above plots:\n\nSome violin plots are uni-modal, while others exhibit bi-modal shapes. Bi-modal violin plots suggest that students of parents with the same ISCED level have scores distributed into different groups, with some achieving higher scores and others scoring lower.\nViolin plots for students whose parents have an ISCED level of 8 (doctoral) are elongated in all three subjects and overall. This may indicate a wider distribution of scores across subjects, suggesting greater variability. This situation suggests that students with parents holding a doctoral degree show significant variations in performance, with some achieving high scores and others performing poorly. Compared to students with parents at other ISCED level, this reflects uncertainty and diversity in performance within doctoral family backgrounds.\nViolin plots for students whose parents have an ISCED level of 6 (bachelor’s) and 7 (master’s) are short and stout in all three subjects and overall. This suggests that these students have a relatively concentrated distribution of scores, indicating lower variability. This situation implies that most students with parents holding bachelor’s and master’s degrees exhibit a relatively consistent level of academic performance, with fewer extremes of high or low scores. Compared to students with parents at other ISCED level, these students from bachelor’s and master’s backgrounds demonstrate a more stable and consistent performance.\n\n\n\n4.3.2 Home Possessions\nIn this section, the report will sum up some data in the student questionnaire data set that reflects aspects of home processions (HOMEPOS). The sum of this data will be used to represent the HOMEPOS. Subsequently, an analysis will be conducted to examine the impact of HOMEPOS on student performance.\nBy the following code block, the calculation of HOMOPOS can be carried out:\n\n\nShow the code\nHOMEPOS &lt;- stu_qqq_SG %&gt;%\n  mutate(HOMEPOS_Number = coalesce(ST251Q01JA, 0) +\n                              coalesce(ST251Q02JA, 0) +\n                              coalesce(ST251Q03JA, 0) +\n                              coalesce(ST251Q04JA, 0) +\n                              coalesce(ST251Q06JA, 0) +\n                              coalesce(ST251Q07JA, 0) +\n                              coalesce(ST253Q01JA, 0) +\n                              coalesce(ST255Q01JA, 0))\nPV_Avg_HOMEPOS &lt;- cbind(PV_Avg, Home_Possessions = HOMEPOS$HOMEPOS_Number)\nwrite_rds(PV_Avg_HOMEPOS, \"data/stu_qqq_SG_PV_Avg_HOMEPOS.rds\")\nhead(PV_Avg_HOMEPOS)\n\n\n  CNTSTUID Avg_PVMath Avg_PVRead Avg_PVScience Avg_PVOverall Home_Possessions\n1 70200001   605.2533   667.4296      639.7873      637.4901               29\n2 70200002   689.9528   627.6078      672.0703      663.2103               29\n3 70200003   676.7768   582.9252      660.0384      639.9135               23\n4 70200004   401.0528   361.3969      343.6425      368.6974               21\n5 70200005   436.1151   475.6763      479.2390      463.6768               22\n6 70200006   518.1055   431.4652      476.0031      475.1913               20\n\n\nNesxt, let’s see how HOMOPOS influence students’ performance.\n\nHOMEPOS vs MathHOMEPOS vs ReadingHOMEPOS vs ScienceHOMEPOS vs Overall\n\n\n\n\nShow the code\nggplot(data = PV_Avg_HOMEPOS, aes(x = factor(Home_Possessions), y = Avg_PVMath)) +\n  geom_boxplot(width = 0.5, fill = \"lightblue\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"HOMEPOS\", y = \"Math Score\", title = \"Distribution of Math Scores by HOMEPOS\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg_HOMEPOS, aes(x = factor(Home_Possessions), y = Avg_PVRead)) +\n  geom_boxplot(width = 0.5, fill = \"lightgreen\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"HOMEPOS\", y = \"Reading Score\", title = \"Distribution of Reading Scores by HOMEPOS\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg_HOMEPOS, aes(x = factor(Home_Possessions), y = Avg_PVScience)) +\n  geom_boxplot(width = 0.5, fill = \"pink\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"HOMEPOS\", y = \"Science Score\", title = \"Distribution of Science Scores by HOMEPOS\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = PV_Avg_HOMEPOS, aes(x = factor(Home_Possessions), y = Avg_PVOverall)) +\n  geom_boxplot(width = 0.5, fill = \"#D2B4E8\") +\n  stat_summary(fun = \"median\", geom = \"line\", aes(group = 1), color = \"red\", linewidth = 1) +  \n  labs(x = \"HOMEPOS\", y = \"Overall Score\", title = \"Distribution of Overall Scores by HOMEPOS\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\nBased on the observed trends from the above plots, we can see that:\nAs the HOMEPOS values increase, there is an upward trend in students’ scores. However, after reaching a certain point, there seems to be a decline. Specifically, when HOMEPOS values exceed 35, the performance in three subjects and overall appears to decrease. This suggests that an increase in HOMEPOS contributes positively to student performance up to a certain point, but when the HOMEPOS values become excessively high, student performance may start to decline.",
    "crumbs": [
      "Home",
      "Take-home Exercise",
      "Take Home Ex01",
      "Analysis of Singaporean Students' Performance"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(1).html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(1).html",
    "title": "Creating Ternary Plot with R",
    "section": "",
    "text": "Show the code: load R packages\npacman::p_load(plotly, ggtern, tidyverse)\nMain packages to be used for creating ternary plot: ggtern and plotlyr\nShow the code: Import data\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nShow the code: Prepare data\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Creating Ternary Plot with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(1).html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(1).html#plotting-a-static-ternary-diagram",
    "title": "Creating Ternary Plot with R",
    "section": "1.1 Plotting a static ternary diagram",
    "text": "1.1 Plotting a static ternary diagram\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Creating Ternary Plot with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(1).html#plotting-an-interative-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(1).html#plotting-an-interative-ternary-diagram",
    "title": "Creating Ternary Plot with R",
    "section": "1.2 Plotting an interative ternary diagram",
    "text": "1.2 Plotting an interative ternary diagram\n\n\nShow the code: Plotting an interative ternary diagram\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\n\nNo scatterternary mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Creating Ternary Plot with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html",
    "title": "Visual Correlation Analysis",
    "section": "",
    "text": "# load R packages\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n# import data\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#building-a-basic-correlation-matrix",
    "title": "Visual Correlation Analysis",
    "section": "1.1 Building a basic correlation matrix",
    "text": "1.1 Building a basic correlation matrix\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#drawing-the-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#drawing-the-corner",
    "title": "Visual Correlation Analysis",
    "section": "1.2 Drawing the corner",
    "text": "1.2 Drawing the corner\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#including-with-correlation-coefficients",
    "title": "Visual Correlation Analysis",
    "section": "1.3 Including with correlation coefficients",
    "text": "1.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot,panel.corfunction will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05(2).html#the-basic-plot",
    "title": "Visual Correlation Analysis",
    "section": "2.1 The basic plot",
    "text": "2.1 The basic plot\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html",
    "title": "Visual Correlation Analysis",
    "section": "",
    "text": "# load R packages\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n# import data\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#building-a-basic-correlation-matrix",
    "title": "Visual Correlation Analysis",
    "section": "1.1 Building a basic correlation matrix",
    "text": "1.1 Building a basic correlation matrix\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#drawing-the-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#drawing-the-corner",
    "title": "Visual Correlation Analysis",
    "section": "1.2 Drawing the corner",
    "text": "1.2 Drawing the corner\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#including-with-correlation-coefficients",
    "title": "Visual Correlation Analysis",
    "section": "1.3 Including with correlation coefficients",
    "text": "1.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot,panel.corfunction will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#getting-started-with-corrplot",
    "title": "Visual Correlation Analysis",
    "section": "4.1 Getting started with corrplot",
    "text": "4.1 Getting started with corrplot\n\nwine.cor &lt;- cor(wine[, 1:11])\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#working-with-visual-geometrics",
    "title": "Visual Correlation Analysis",
    "section": "4.2 Working with visual geometrics",
    "text": "4.2 Working with visual geometrics\n\ncorrplot(wine.cor, \n         method = \"ellipse\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#working-with-layout",
    "title": "Visual Correlation Analysis",
    "section": "4.3 Working with layout",
    "text": "4.3 Working with layout\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#working-with-mixed-layout",
    "title": "Visual Correlation Analysis",
    "section": "4.4 Working with mixed layout",
    "text": "4.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#combining-corrgram-with-the-significant-test",
    "title": "Visual Correlation Analysis",
    "section": "4.5 Combining corrgram with the significant test",
    "text": "4.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#reorder-a-corrgram",
    "title": "Visual Correlation Analysis",
    "section": "4.6 Reorder a corrgram",
    "text": "4.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_2.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Visual Correlation Analysis",
    "section": "4.7 Reordering a correlation matrix using hclust",
    "text": "4.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Correlation Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "# load R packages\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n# import data\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# prepare data\nrow.names(wh) &lt;- wh$Country\n\nWarning: Setting row names on a tibble is deprecated.\n\n# Transforming the data frame into a matrix\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html",
    "title": "Creating Ternary Plot with R",
    "section": "",
    "text": "Show the code: load R packages\npacman::p_load(plotly, ggtern, tidyverse)\nMain packages to be used for creating ternary plot: ggtern and plotlyr\nShow the code: Import data\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nShow the code: Prepare data\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Creating Ternary Plot with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plotting-a-static-ternary-diagram",
    "title": "Creating Ternary Plot with R",
    "section": "1.1 Plotting a static ternary diagram",
    "text": "1.1 Plotting a static ternary diagram\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Creating Ternary Plot with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plotting-an-interative-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_1.html#plotting-an-interative-ternary-diagram",
    "title": "Creating Ternary Plot with R",
    "section": "1.2 Plotting an interative ternary diagram",
    "text": "1.2 Plotting an interative ternary diagram\n\n\nShow the code: Plotting an interative ternary diagram\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\n\nNo scatterternary mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Creating Ternary Plot with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#working-with-heatmaply",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.1 Working with heatmaply",
    "text": "2.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#data-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#data-transformation",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.2 Data transformation",
    "text": "2.2 Data transformation\n\n2.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columewise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n2.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n2.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#clustering-algorithm",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.3 Clustering algorithm",
    "text": "2.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#manual-approach",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.4 Manual approach",
    "text": "2.4 Manual approach\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#statistical-approach",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.5 Statistical approach",
    "text": "2.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#seriation",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.6 Seriation",
    "text": "2.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\nRegistered S3 method overwritten by 'gclus':\n  method         from     \n  reorder.hclust seriation\n\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#working-with-colour-palettes",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.7 Working with colour palettes",
    "text": "2.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_3.html#the-finishing-touch",
    "title": "Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.8 The finishing touch",
    "text": "2.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Heatmap for Visualising and Analysing Multivariate Data"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "# load R packages\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n# import data\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-a-simple-parallel-coordinates",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "1.1 Plotting a simple parallel coordinates",
    "text": "1.1 Plotting a simple parallel coordinates\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "1.2 Plotting a parallel coordinates with boxplot",
    "text": "1.2 Plotting a parallel coordinates with boxplot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#parallel-coordinates-with-facet",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "1.3 Parallel coordinates with facet",
    "text": "1.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#rotating-x-axis-text-label",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "1.4 Rotating x-axis text label",
    "text": "1.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "1.5 Adjusting the rotated x-axis text label",
    "text": "1.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#the-basic-plot",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.1 The basic plot",
    "text": "2.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#rotate-axis-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#rotate-axis-label",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.2 Rotate axis label",
    "text": "2.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#changing-the-colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#changing-the-colour-scheme",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.3 Changing the colour scheme",
    "text": "2.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunl below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_4.html#parallel-coordinates-plot-with-histogram",
    "title": "Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.4 Parallel coordinates plot with histogram",
    "text": "2.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Visual Multivariate Analysis with Parallel Coordinates Plot"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html",
    "title": "Treemap Visualisation with R",
    "section": "",
    "text": "# load R packages\npacman::p_load(treemap, treemapify, tidyverse)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#import-data",
    "title": "Treemap Visualisation with R",
    "section": "1.1 Import data",
    "text": "1.1 Import data\n\n# import data\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nRows: 23205 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): Project Name, Address, Type of Area, Nett Price($), Sale Date, Pro...\ndbl  (8): No. of Units, Area (sqm), Transacted Price ($), Unit Price ($ psm)...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#wrangling-and-manipulation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#wrangling-and-manipulation",
    "title": "Treemap Visualisation with R",
    "section": "1.2 Wrangling and Manipulation",
    "text": "1.2 Wrangling and Manipulation\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#grouped-summaries-without-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#grouped-summaries-without-the-pipe",
    "title": "Treemap Visualisation with R",
    "section": "1.3 Grouped summaries without the Pipe",
    "text": "1.3 Grouped summaries without the Pipe\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAggregation functions such as sum() and meadian() obey the usual rule of missing values: if there’s any missing value in the input, the output will be a missing value. The argument na.rm = TRUE removes the missing values prior to computation.\n\n\nThe code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though we don’t have to care about it.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#grouped-summaries-with-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#grouped-summaries-with-the-pipe",
    "title": "Treemap Visualisation with R",
    "section": "1.4 Grouped summaries with the pipe",
    "text": "1.4 Grouped summaries with the pipe\nThe code chunk below shows a more efficient way to tackle the same processes by using the pipe, %&gt;%\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-a-static-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-a-static-treemap",
    "title": "Treemap Visualisation with R",
    "section": "2.1 Designing a static treemap",
    "text": "2.1 Designing a static treemap\nIn this section, treemap() of Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\nFirst, we will select records belongs to resale condominium property type from realis2018_selected data frame.\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#using-the-basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#using-the-basic-arguments",
    "title": "Treemap Visualisation with R",
    "section": "2.2 Using the basic arguments",
    "text": "2.2 Using the basic arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex\n\nThe index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nIf multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\n\nvSize\n\nThe column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\n\n\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#working-with-vcolor-and-type-arguments",
    "title": "Treemap Visualisation with R",
    "section": "2.3 Working with vColor and type arguments",
    "text": "2.3 Working with vColor and type arguments\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#colours-in-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#colours-in-treemap-package",
    "title": "Treemap Visualisation with R",
    "section": "2.4 Colours in treemap package",
    "text": "2.4 Colours in treemap package\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#the-value-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#the-value-type-treemap",
    "title": "Treemap Visualisation with R",
    "section": "2.5 The “value” type treemap",
    "text": "2.5 The “value” type treemap\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\nThe reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#the-manual-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#the-manual-type-treemap",
    "title": "Treemap Visualisation with R",
    "section": "2.6 The “manual” type treemap",
    "text": "2.6 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#treemap-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#treemap-layout",
    "title": "Treemap Visualisation with R",
    "section": "2.7 Treemap Layout",
    "text": "2.7 Treemap Layout\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#working-with-algorithm-argument",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#working-with-algorithm-argument",
    "title": "Treemap Visualisation with R",
    "section": "2.8 Working with algorithm argument",
    "text": "2.8 Working with algorithm argument\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#using-sortid",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#using-sortid",
    "title": "Treemap Visualisation with R",
    "section": "2.9 Using sortID",
    "text": "2.9 Using sortID\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-a-basic-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-a-basic-treemap",
    "title": "Treemap Visualisation with R",
    "section": "3.1 Designing a basic treemap",
    "text": "3.1 Designing a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#defining-hierarchy",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#defining-hierarchy",
    "title": "Treemap Visualisation with R",
    "section": "3.2 Defining hierarchy",
    "text": "3.2 Defining hierarchy\n\nGroup by Planning RegionGroup by Planning AreaAdding boundary line\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#installing-d3treer-package",
    "title": "Treemap Visualisation with R",
    "section": "4.1 Installing d3treeR package",
    "text": "4.1 Installing d3treeR package\n\n#install.packages(\"devtools\")\nlibrary(devtools)\n\nLoading required package: usethis\n\n\n\n#install_github(\"timelyportfolio/d3treeR\")\nlibrary(d3treeR)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-an-interactive-treemap---step1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-an-interactive-treemap---step1",
    "title": "Treemap Visualisation with R",
    "section": "4.1 Designing An Interactive Treemap - Step1",
    "text": "4.1 Designing An Interactive Treemap - Step1\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-an-interactive-treemap---step2",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_5.html#designing-an-interactive-treemap---step2",
    "title": "Treemap Visualisation with R",
    "section": "4.2 Designing An Interactive Treemap - Step2",
    "text": "4.2 Designing An Interactive Treemap - Step2\nThen d3tree() is used to build an interactive treemap.\n\nd3tree(tm,rootname = \"Singapore\" )",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Treemap Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html",
    "title": "Untitled",
    "section": "",
    "text": "# load R packages\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n# import data\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Untitled"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html#building-a-basic-correlation-matrix",
    "title": "Untitled",
    "section": "1.1 Building a basic correlation matrix",
    "text": "1.1 Building a basic correlation matrix\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Untitled"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html#drawing-the-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html#drawing-the-corner",
    "title": "Untitled",
    "section": "1.2 Drawing the corner",
    "text": "1.2 Drawing the corner\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Untitled"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05_6.html#including-with-correlation-coefficients",
    "title": "Untitled",
    "section": "1.3 Including with correlation coefficients",
    "text": "1.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot,panel.corfunction will be used. This will also show higher correlations in a larger font.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)",
    "crumbs": [
      "Home",
      "Hands-on Exercise",
      "Hands on Ex05",
      "Untitled"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Be Weatherwise or Otherwise",
    "section": "",
    "text": "Singapore is located near the equator and falls under a tropical rainforest climate, characterized by high temperatures, high humidity, and abundant rainfall throughout the year. The lack of seasonal variations lull many into thinking that Singapore’s weather is predictable and unchanging. Nothing is further from the truth, with climate change making the city state’s weather even more unpredictable. The global climate change has led to higher temperatures, increased rainfall, and rising sea levels in Singapore.\nAccording to an office report as shown in the info graphic below, by the end of this century,\nSource: Ministry of Sustainability and the Environment\nTo gain a deeper understanding of the climate change process, I will employ the art of data visualization analysis to illustrate the variations in temperature and rainfall in Singapore over the years.\nShow the code: Load R packages\npacman::p_load(tidyverse, dplyr, plotly, tidyr, gganimate, highcharter)",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-source",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-source",
    "title": "Be Weatherwise or Otherwise",
    "section": "1.1 Data Source",
    "text": "1.1 Data Source\nThe data source for this analysis was obtained by the following steps:\n\nOpen the Meteorological Service Singapore website and navigate to the Historical Daily Records page.\nI chose Changi as the location and downloaded historical data for December in the years 1983, 1993, 2003, 2013, and 2023.\nMerge the above five .csv data files together to get the “Historical_Records.csv” data file. (The merging process was performed in Excel due to the low volume of data.)\n\n\n\n\n\n\n\nNote\n\n\n\nThe selection of the data source is based on the requirements of the take-home exercise of ISSS608 Visual Analytics and Applications, which may introduce limitations to the climate change analysis. However, I strive to utilize data visualization techniques as much as possible in the following analysis.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#data-cleaning",
    "title": "Be Weatherwise or Otherwise",
    "section": "1.2 Data Cleaning",
    "text": "1.2 Data Cleaning\n\n\nShow the code: Glimpse of Historical_Records.csv\nHistorical_Records &lt;- read.csv(\"data/Historical_Records.csv\")\nglimpse(Historical_Records)\n\n\nRows: 155\nColumns: 13\n$ Station                       &lt;chr&gt; \"Changi\", \"Changi\", \"Changi\", \"Changi\", …\n$ Year                          &lt;int&gt; 1983, 1983, 1983, 1983, 1983, 1983, 1983…\n$ Month                         &lt;int&gt; 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, …\n$ Day                           &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1…\n$ Daily.Rainfall.Total..mm.     &lt;dbl&gt; 2.8, 1.7, 5.0, 8.2, 0.0, 0.0, 0.0, 19.8,…\n$ Highest.30.Min.Rainfall..mm.  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", …\n$ Highest.60.Min.Rainfall..mm.  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", …\n$ Highest.120.Min.Rainfall..mm. &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\", …\n$ Mean.Temperature...C.         &lt;dbl&gt; 26.4, 24.3, 25.1, 25.2, 26.0, 25.0, 25.6…\n$ Maximum.Temperature...C.      &lt;dbl&gt; 31.0, 27.2, 30.2, 30.3, 29.8, 27.7, 28.8…\n$ Minimum.Temperature...C.      &lt;dbl&gt; 23.8, 21.9, 23.2, 23.0, 23.0, 23.7, 23.4…\n$ Mean.Wind.Speed..km.h.        &lt;dbl&gt; 9.1, 4.9, 3.1, 3.2, 4.5, 4.4, 4.9, 5.4, …\n$ Max.Wind.Speed..km.h.         &lt;dbl&gt; 46.1, 36.4, 41.0, 31.7, 28.8, 32.4, 32.8…\n\n\n\nThen, the Historical_Records.csv was processed as follows:\n\nSince all data originated from Changi station and December, columns “Station” and “Month” were removed.\nColumns “Highest 30 Min Rainfall (mm)”, “Highest 60 Min Rainfall (mm)”, and “Highest 60 Min Rainfall (mm)” contained data only for December 2023, with insufficient data for comparison; hence, these three columns were deleted.\nChange the format of column names. For example, replace “Daily.Rainfall.Total..mm.” with “Daily_Rainfall_Total”.\nThe following analysis is solely focused on temperature and rainfall; therefore, the column “Mean Wind Speed” and “Max Wind Speed” are also excluded.\n\n\n\n\nShow the code: Glimpse of the cleaned data (Historical_Records2)\n# Select columns to keep\nHistorical_Records2 &lt;- select(Historical_Records, Year, Day, Daily.Rainfall.Total..mm., Mean.Temperature...C., Maximum.Temperature...C., Minimum.Temperature...C.)\n\n# Replace column names\ncolnames(Historical_Records2) &lt;- gsub(\"Daily.Rainfall.Total..mm.\", \"Daily_Rainfall_Total\", colnames(Historical_Records2))\ncolnames(Historical_Records2) &lt;- gsub(\"Mean.Temperature...C.\", \"Mean_Temperature\", colnames(Historical_Records2))\ncolnames(Historical_Records2) &lt;- gsub(\"Maximum.Temperature...C.\", \"Maximum_Temperature\", colnames(Historical_Records2))\ncolnames(Historical_Records2) &lt;- gsub(\"Minimum.Temperature...C.\", \"Minimum_Temperature\", colnames(Historical_Records2))\n\n# View the structure of Historical_Records2\nglimpse(Historical_Records2)\n\n\nRows: 155\nColumns: 6\n$ Year                 &lt;int&gt; 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1983, 1…\n$ Day                  &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ Daily_Rainfall_Total &lt;dbl&gt; 2.8, 1.7, 5.0, 8.2, 0.0, 0.0, 0.0, 19.8, 48.1, 21…\n$ Mean_Temperature     &lt;dbl&gt; 26.4, 24.3, 25.1, 25.2, 26.0, 25.0, 25.6, 24.9, 2…\n$ Maximum_Temperature  &lt;dbl&gt; 31.0, 27.2, 30.2, 30.3, 29.8, 27.7, 28.8, 28.7, 2…\n$ Minimum_Temperature  &lt;dbl&gt; 23.8, 21.9, 23.2, 23.0, 23.0, 23.7, 23.4, 23.0, 2…\n\n\nTo begin with, let’s take a quick look at the approximate climate changes. The following interactive area-line chart shows the trends in December average temperature and total rainfall in the years 1983, 1993, 2003, 2013, and 2023 recorded by the Singapore Changi station.\n\nArea-line Chart: December Average Temperature and Total Rainfall Trend\n\n\n\n\nShow the code: December Average Temperature and Total Rainfall Trend (Singapore, Changi)\n# Calculate the average temperature and rainfall for each December\ndecember_data &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    Dec_Avg_Temperature = mean(Mean_Temperature),\n    Dec_Rainfall_Total = sum(Daily_Rainfall_Total)\n  )\n\n# Change the data type of \"Year\" from INT to CHR\ndecember_data$Year &lt;- as.character(december_data$Year)\n\n#create interactive chart for the average temperature and rainfall for each December\nhighchart() %&gt;%\n  hc_title(text = \"&lt;b&gt;Area-line Chart: December Average Temperature and Total Rainfall Trend (Singapore, Changi)&lt;/b&gt;\", style = list(fontSize = '1.5em')) %&gt;%\n  hc_xAxis(categories = december_data$Year) %&gt;%\n  hc_add_series(data = december_data, type = \"area\", hcaes(x = Year, y = Dec_Rainfall_Total), name = \"&lt;b&gt;Dec. Rainfall Total (mm)&lt;/b&gt;\", color = \"#3498DB\", yAxis = 1) %&gt;%\n  hc_add_series(data = december_data, type = \"line\", hcaes(x = Year, y = Dec_Avg_Temperature), name = \"&lt;b&gt;Dec. Avg. Temp. (ºC)&lt;/b&gt;\", color = \"#E74C3C\", marker = list(enabled = TRUE), lineWidth = 4) %&gt;%\n  hc_yAxis_multiples(\n    list(title = list(text = \"&lt;b&gt;Dec. Avg. Temp. (ºC)&lt;/b&gt;\"), opposite = FALSE, style = list(fontWeight = \"bold\", fontSize = \"16px\")),\n    list(title = list(text = \"&lt;b&gt;Dec. Rainfall Total (mm)&lt;/b&gt;\"), opposite = TRUE, style = list(fontWeight = \"bold\", fontSize = \"16px\"))) %&gt;%\n  hc_tooltip(useHTML = TRUE,shared = TRUE, crosshairs = TRUE, valueDecimals = 2) %&gt;%\n  hc_legend(itemStyle = list(fontWeight = \"bold\", fontSize = \"12px\"))%&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )\n\n\n\n\n\n\n\n\n\n\nObservation from the area-line chart:\nFrom this chart, we can clearly see a significant rise in temperatures in the Changi region of Singapore compared to 1983, but there is no clear pattern in rainfall.\n\n\nIn the following section, I will showcase more visualized data regarding temperature and rainfall.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#avg.-mean-temp.",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#avg.-mean-temp.",
    "title": "Be Weatherwise or Otherwise",
    "section": "Avg. Mean Temp.",
    "text": "Avg. Mean Temp.\n\n\nShow the code: Singapore (Changi) Avg. Mean Temperature in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. Temperature in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 15,hjust = 0.5, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#avg.-max.-temp.",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#avg.-max.-temp.",
    "title": "Be Weatherwise or Otherwise",
    "section": "Avg. Max. Temp.",
    "text": "Avg. Max. Temp.\n\n\nShow the code: Singapore (Changi) Avg. Max. Temperature in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. Max. Temperature in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 15,hjust = 0.5, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#avg.-min.-temp.",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#avg.-min.-temp.",
    "title": "Be Weatherwise or Otherwise",
    "section": "Avg. Min. Temp.",
    "text": "Avg. Min. Temp.\n\n\nShow the code: Singapore (Changi) Avg. Min. Temperature in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. Min. Temperature in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 15,hjust = 0.5, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n:::",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-temperature-changes-by-decade",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-temperature-changes-by-decade",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Average Temperature Changes by Decade",
    "text": "2.1 Average Temperature Changes by Decade\nFirstly, let’s observe the changes in the month average of mean, maximum, and minimum temperatures recorded in December at Singapore’s Changi Meteorological Station from 1983 to 2023 through the animated histogram charts below.\n\nAvg. Mean Temp.Avg. Max. Temp.Avg. Min. Temp.\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14,margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np2 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np2 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np3 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np3 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Rainfall Total in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_sum_rainfall &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Sum_Rainfall = sum(Daily_Rainfall_Total))\n\n# Calculate the rank of average December temperatures for each year\ndecember_sum_rainfall &lt;- december_sum_rainfall %&gt;%\n  mutate(Rank = rank(-Month_Sum_Rainfall)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_sum_rainfall, aes(Year, Month_Sum_Rainfall, fill =Month_Sum_Rainfall)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Sum_Rainfall, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Blues\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Rainfall Total in December (1983-2023)\",\n    y = \"MOnth Rainfall Total (mm)\",\n    fill = \"Rainfall (mm)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\nObservation from the above animated charts:\n\n\n\nFor temperature, it seems that there is no discernible change from 1993 to 2013, as indicated by the similar colors of the histograms in those years (1993, 2003, and 2013). However, when examining a broader time span, there is a notable increase from 1983 to 2023. The histogram color for 2023 is significantly darker compared to that of 1983. Roughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.\nFor rainfall, no clear patterns can be seen. However, it’s noticeable that in December 2023, compared to previous decades, the temperature is higher and rainfall is lower.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-temperature-and-total-rainfall-changes-by-decade",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-temperature-and-total-rainfall-changes-by-decade",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Average Temperature and Total Rainfall Changes by Decade",
    "text": "2.1 Average Temperature and Total Rainfall Changes by Decade\nFirstly, let’s observe the changes in the month average of mean, maximum, and minimum temperatures recorded in December at Singapore’s Changi Meteorological Station from 1983 to 2023 through the animated histogram charts below.\n\nAvg. Mean Temp.Avg. Max. Temp.Avg. Min. Temp.\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14,margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np2 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np2 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np3 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np3 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Rainfall Total in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_sum_rainfall &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Sum_Rainfall = sum(Daily_Rainfall_Total))\n\n# Calculate the rank of average December temperatures for each year\ndecember_sum_rainfall &lt;- december_sum_rainfall %&gt;%\n  mutate(Rank = rank(-Month_Sum_Rainfall)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_sum_rainfall, aes(Year, Month_Sum_Rainfall, fill =Month_Sum_Rainfall)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Sum_Rainfall, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Blues\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Rainfall Total in December (1983-2023)\",\n    y = \"MOnth Rainfall Total (mm)\",\n    fill = \"Rainfall (mm)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\nObservation from the above animated charts:\n\n\n\nFor temperature, it seems that there is no discernible change from 1993 to 2013, as indicated by the similar colors of the histograms in those years (1993, 2003, and 2013). However, when examining a broader time span, there is a notable increase from 1983 to 2023. The histogram color for 2023 is significantly darker compared to that of 1983. Roughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.\nFor rainfall, no clear patterns can be seen.\nHowever, it’s noticeable that in December 2023, compared to previous decades, the temperature is higher and rainfall is lower.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#average-temperature",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Average Temperature",
    "text": "2.1 Average Temperature\nFirstly, let’s observe the changes in the month average of mean, maximum, and minimum temperatures recorded in December at Singapore’s Changi Meteorological Station from 1983 to 2023 through the animated histogram charts below.\n\nAvg. Mean Temp.Avg. Max. Temp.Avg. Min. Temp.\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14,margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np2 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np2 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np3 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np3 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#total-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#total-rainfall",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.2 Total Rainfall",
    "text": "2.2 Total Rainfall",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-average-temperature-by-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-average-temperature-by-year",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Month Average Temperature by Year",
    "text": "2.1 Month Average Temperature by Year\nFirstly, let’s observe the changes in the month average of mean, maximum, and minimum temperatures recorded in December at Singapore’s Changi Meteorological Station from 1983 to 2023 through the animated histogram charts below.\n\nAvg. Mean Temp.Avg. Max. Temp.Avg. Min. Temp.\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14,margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np2 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np2 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np3 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np3 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the above animated charts:\n\n\n\nFor temperature, it seems that there is no discernible change from 1993 to 2013, as indicated by the similar colors of the histograms in those years (1993, 2003, and 2013). However, when examining a broader time span, there is a notable increase from 1983 to 2023. The histogram color for 2023 is significantly darker compared to that of 1983.\nRoughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-total-rainfall-by-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-total-rainfall-by-year",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.1 Month Total Rainfall by Year",
    "text": "3.1 Month Total Rainfall by Year\nNow, let’s see the total rainfall in December of different years though the following animated chart.\n\n\nShow the code: Singapore (Changi) Total Rainfall in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_sum_rainfall &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Sum_Rainfall = sum(Daily_Rainfall_Total))\n\n# Calculate the rank of average December temperatures for each year\ndecember_sum_rainfall &lt;- december_sum_rainfall %&gt;%\n  mutate(Rank = rank(-Month_Sum_Rainfall)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np4 &lt;- ggplot(december_sum_rainfall, aes(Year, Month_Sum_Rainfall, fill =Month_Sum_Rainfall)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Sum_Rainfall, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Blues\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Total Rainfall in December (1983-2023)\",\n    y = \"Monthly Total Rainfall (mm)\",\n    fill = \"Rainfall (mm)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np4 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Heatmap: Daily Rainfall in Dec. (Changi, Singapore, 1983-2023)\n# Group by year\ndecember_rainfall_by_year &lt;- Historical_Records2 %&gt;%\n  group_by(Year, Day)\n\ndecember_rainfall_by_year &lt;- december_rainfall_by_year %&gt;%\n  mutate(text = paste0(\"Date: \", \"Dec\", Day, \",\", Year, \"\\nDaily Rainfall Total:\", Daily_Rainfall_Total, \"(mm)\"))\n\n# create heatmap\np &lt;- ggplot(december_rainfall_by_year, aes(Day, Year, fill = Daily_Rainfall_Total, text = text)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"Blues\",direction=1) +\n  labs(\n    title = \"Heatmap: Daily Rainfall in Dec. (Changi, Singapore, 1983-2023)\",\n    x = \"Day\",\n    y=\"Year\",\n    fill=\"Rainfall (mm)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", margin = margin(b = 40),hjust = 0.5),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\nShow the code: 3D Scatter Plot: Daily Rainfall in Dec. (Singapore, Changi, 1983-2023)\n# Calculate the list of years (displaying only years with data)\nyears_with_data &lt;- unique(Historical_Records2$Year)\n\n# Filter data by year\ndecember_rainfall_by_year &lt;- Historical_Records2 %&gt;%\n  filter(Year %in% years_with_data) %&gt;%\n  group_by(Year, Day)\n\n# Set marker size based on the size of Daily_Rainfall_Total\nmax_rainfall &lt;- max(Historical_Records2$Daily_Rainfall_Total)\nmin_rainfall &lt;- min(Historical_Records2$Daily_Rainfall_Total)\n\n# Calculate the range of marker sizes\nsize_range &lt;- c(1, 70)\n\n# Calculate normalized values for Daily_Rainfall_Total in [0, 1]\nnormalized_rainfall &lt;- (Historical_Records2$Daily_Rainfall_Total - min_rainfall) / (max_rainfall - min_rainfall)\n\n# Calculate marker size based on normalized values\nmarker_size &lt;- size_range[1] + normalized_rainfall * (size_range[2] - size_range[1])\n\n# Create a 3D scatter plot\nfig &lt;- plot_ly(december_rainfall_by_year, x = ~Year, y = ~Day, z = ~Daily_Rainfall_Total,\n               marker = list(size = marker_size, \n                             color = ~Daily_Rainfall_Total, \n                             colorscale = \"Blues\",\n                             cmin = min_rainfall, # Set the minimum value\n                             cmax = max_rainfall, # Set the maximum value                             \n                             reversescale = TRUE, # Make the color gradient from light to dark\n                             showscale = TRUE),\n               hoverinfo = \"text\",\n               text = ~paste(\"Date: Dec \", Day, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Daily Rainfall Total:\", Daily_Rainfall_Total, \"mm\"),\n               hoverlabel = list(bgcolor = \"black\", font = list(color = \"white\")), # Set hover text color to white\n               frame = ~Year, # Include all years up to the current one\n               type = 'scatter3d') # Set type to 'scatter3d'\n\n# Define layout for the plot\nfig &lt;- fig %&gt;% layout(scene = list(xaxis = list(title = 'Year', tickvals = years_with_data),\n                                   yaxis = list(title = 'Day in December'),\n                                   zaxis = list(title = 'Rainfall')),\n                      title = list(text = \"3D Scatter Plot: Daily Rainfall in Dec. (Singapore, Changi, 1983-2023)\",\n                                   xref = \"paper\",\n                                   xanchor = \"center\",\n                                   yanchor = \"middle\",\n                                   font = list(size = 15, weight = \"bold\")),\n                      updatemenus = list(list(type = \"buttons\", \n                                              buttons = list(list(label = \"Play\",\n                                                                  method = \"animate\",\n                                                                  args = list(frame = list(duration = 500, redraw = TRUE), \n                                                                              transition = list(duration = 0),\n                                                                              fromcurrent = TRUE, \n                                                                              mode = \"immediate\")))))) \n\nfig\n\n\nNo scatter3d mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-average-temperature-by-every-decade-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-average-temperature-by-every-decade-year",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Month Average Temperature by Every Decade Year",
    "text": "2.1 Month Average Temperature by Every Decade Year\nFirstly, let’s observe the changes in the month average of mean, maximum, and minimum temperatures recorded in December at Singapore’s Changi Meteorological Station from 1983 to 2023 through the animated histogram charts below.\n\nAvg. Mean Temp.Avg. Max. Temp.Avg. Min. Temp.\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Mean Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14,margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np2 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Max. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np2 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np3 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Avg. of Daily Min. Temp. in December (1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np3 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the above animated charts:\n\n\n\nFor temperature, it seems that there is no discernible change from 1993 to 2013, as indicated by the similar colors of the histograms in those years (1993, 2003, and 2013). However, when examining a broader time span, there is a notable increase from 1983 to 2023. The histogram color for 2023 is significantly darker compared to that of 1983.\nRoughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperture-in-december-by-every-decade-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperture-in-december-by-every-decade-year",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.2 Daily Mean Temperture in December by Every Decade Year",
    "text": "2.2 Daily Mean Temperture in December by Every Decade Year\nThe below heatmap shows the mean temperature in December from 1983 to 2023 by every decade.\n\n\nShow the code: Daily Mean Temperture in December (Changi, Singapore, 1983-2023)\n# Group by year\ndecember_daily_Temp_by_year &lt;- Historical_Records2 %&gt;%\n  group_by(Year, Day)\n\ndecember_daily_temp_by_year &lt;- december_daily_Temp_by_year %&gt;%\n  mutate(text = paste0(\"Date: \", \"Dec \", Day, \", \", Year, \"\\nDaily Mean Temp.: \", Mean_Temperature, \"ºC\"))\n\n# create heatmap\np4 &lt;- ggplot(december_daily_temp_by_year, aes(Day, Year, fill = Mean_Temperature, text = text)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"RdYlBu\",limits = c(24, 30)) +\n  labs(\n    title = \"Daily Mean Temperture in December (Changi, Singapore, 1983-2023)\",\n    x = \"Day in December\",\n    y=\"Year\",\n    fill=\"Temp. (ºC)\"\n  )+\n  scale_x_continuous(breaks = 1:31)+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", margin = margin(b = 40),hjust = 0.5),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\nggplotly(p4, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the above heatmap chart:\n\n\n\n\nFrom bottom to top, the number of blue blocks decreases noticeably, indicating that hot days in December were increasing.\nFrom 1983 to 1993 and from 2013 to 2023, the number of blue blocks significantly decreases, demonstrating substantial weather changes in these two decades.\nIn 2023, there are no blue blocks, indicating severe temperatures in recent years.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-average-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#month-average-temperature",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Month Average Temperature",
    "text": "2.1 Month Average Temperature\nFirstly, let’s observe the changes in the month average of mean, maximum, and minimum temperatures recorded in December at Singapore’s Changi Meteorological Station from 1983 to 2023 through the animated histogram charts below.\n\nAvg. Mean Temp.Avg. Max. Temp.Avg. Min. Temp.\n\n\n\n\nShow the code: Avg. of Daily Mean Temp. in December (Singapore, Changi, 1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_avg_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Avg_Temperature = mean(Mean_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_avg_temp &lt;- december_avg_temp %&gt;%\n  mutate(Rank = rank(-Month_Avg_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np1 &lt;- ggplot(december_avg_temp, aes(Year, Month_Avg_Temperature, fill = Month_Avg_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Avg_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Avg. of Daily Mean Temp. in December (Singapore, Changi, 1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14,margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np1 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Avg. of Daily Max. Temp. in December (Singapore, Changi, 1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_max_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Max_Temperature = mean(Maximum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_max_temp &lt;- december_max_temp %&gt;%\n  mutate(Rank = rank(-Month_Max_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np2 &lt;- ggplot(december_max_temp, aes(Year, Month_Max_Temperature, fill = Month_Max_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Max_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Avg. of Daily Max. Temp. in December (Singapore, Changi, 1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np2 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Avg. of Daily Min. Temp. in December (Singapore, Changi, 1983-2023))\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_min_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Min_Temperature = mean(Minimum_Temperature))\n\n# Calculate the rank of average December temperatures for each year\ndecember_min_temp &lt;- december_min_temp %&gt;%\n  mutate(Rank = rank(-Month_Min_Temperature)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np3 &lt;- ggplot(december_min_temp, aes(Year, Month_Min_Temperature, fill = Month_Min_Temperature)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Min_Temperature, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Reds\", direction = 1) +\n  labs(\n    title = \"Avg. of Daily Min. Temp. in December (Singapore, Changi, 1983-2023)\",\n    y = \"Temp. (ºC)\",\n    fill = \"Temp. (ºC)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  )\n\n# Add transition animation and styling\np3 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the above animated charts:\n\n\n\nFor temperature, it seems that there is no discernible change from 1993 to 2013, as indicated by the similar colors of the histograms in those years (1993, 2003, and 2013). However, when examining a broader time span, there is a notable increase from 1983 to 2023. The histogram color for 2023 is significantly darker compared to that of 1983.\nRoughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperture-in-december",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperture-in-december",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.2 Daily Mean Temperture in December",
    "text": "2.2 Daily Mean Temperture in December\nThe below heatmap shows the mean temperature in December from 1983 to 2023 by every decade.\n\n\nShow the code: Daily Mean Temperture in December (Changi, Singapore, 1983-2023)\n# Group by year\ndecember_daily_Temp_by_year &lt;- Historical_Records2 %&gt;%\n  group_by(Year, Day)\n\ndecember_daily_temp_by_year &lt;- december_daily_Temp_by_year %&gt;%\n  mutate(text = paste0(\"Date: \", \"Dec \", Day, \", \", Year, \"\\nDaily Mean Temp.: \", Mean_Temperature, \"ºC\"))\n\n# create heatmap\np4 &lt;- ggplot(december_daily_temp_by_year, aes(Day, Year, fill = Mean_Temperature, text = text)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"RdYlBu\",limits = c(24, 30)) +\n  labs(\n    title = \"Daily Mean Temperture in December (Changi, Singapore, 1983-2023)\",\n    x = \"Day in December\",\n    y=\"Year\",\n    fill=\"Temp. (ºC)\"\n  )+\n  scale_x_continuous(breaks = 1:31)+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", margin = margin(b = 40),hjust = 0.5),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\nggplotly(p4, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the above heatmap chart:\n\n\n\n\nFrom bottom to top, the number of blue blocks decreases noticeably, indicating that hot days in December were increasing.\nFrom 1983 to 1993 and from 2013 to 2023, the number of blue blocks significantly decreases, demonstrating substantial weather changes in these two decades.\nIn 2023, there are no blue blocks, indicating severe temperatures in recent years.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-total-rainfall-by-year",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-total-rainfall-by-year",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.1 Monthly Total Rainfall by Year",
    "text": "3.1 Monthly Total Rainfall by Year\nNow, let’s see the total rainfall in December of different years though the following animated chart.\n\n\nShow the code: Singapore (Changi) Total Rainfall in December (1983-2023)\n# Convert the Year column to character type\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# Calculate the average temperature for each December\ndecember_sum_rainfall &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Month_Sum_Rainfall = sum(Daily_Rainfall_Total))\n\n# Calculate the rank of average December temperatures for each year\ndecember_sum_rainfall &lt;- december_sum_rainfall %&gt;%\n  mutate(Rank = rank(-Month_Sum_Rainfall)) # Use negative values to ensure higher temperatures get higher ranks\n\n# Create the plot\np4 &lt;- ggplot(december_sum_rainfall, aes(Year, Month_Sum_Rainfall, fill =Month_Sum_Rainfall)) +\n  geom_col(width = 0.6) +\n  geom_text(aes(label = round(Month_Sum_Rainfall, 1)), vjust = -0.5, size = 3, color = \"black\") + # Add text annotations\n  scale_fill_distiller(palette = \"Blues\", direction = 1) +\n  labs(\n    title = \"Singapore (Changi) Total Rainfall in December (1983-2023)\",\n    y = \"Monthly Total Rainfall (mm)\",\n    fill = \"Rainfall (mm)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 40)),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\n# Add transition animation and styling\np4 + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +  # Add grow effect to bars\n  enter_fade()   # Add fade effect during transition",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-total-rainfall-in-december",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-total-rainfall-in-december",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.2 Daily Total Rainfall in December",
    "text": "3.2 Daily Total Rainfall in December\n\n\nShow the code: Heatmap: Daily Rainfall in Dec. (Changi, Singapore, 1983-2023)\n# Group by year\ndecember_rainfall_by_year &lt;- Historical_Records2 %&gt;%\n  group_by(Year, Day)\n\ndecember_rainfall_by_year &lt;- december_rainfall_by_year %&gt;%\n  mutate(text = paste0(\"Date: \", \"Dec \", Day, \",\", Year, \"\\nDaily Rainfall Total: \", Daily_Rainfall_Total, \" (mm)\"))\n\n# create heatmap\np &lt;- ggplot(december_rainfall_by_year, aes(Day, Year, fill = Daily_Rainfall_Total, text = text)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"Blues\",direction=1) +\n  labs(\n    title = \"Heatmap: Daily Rainfall in Dec. (Changi, Singapore, 1983-2023)\",\n    x = \"Day\",\n    y=\"Year\",\n    fill=\"Rainfall (mm)\"\n  )+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", margin = margin(b = 40),hjust = 0.5),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\nggplotly(p, tooltip = \"text\")\n\n\n\n\n\n\n\n\nShow the code: 3D Scatter Plot: Daily Rainfall in Dec. (Singapore, Changi, 1983-2023)\n# Calculate the list of years (displaying only years with data)\nyears_with_data &lt;- unique(Historical_Records2$Year)\n\n# Filter data by year\ndecember_rainfall_by_year &lt;- Historical_Records2 %&gt;%\n  filter(Year %in% years_with_data) %&gt;%\n  group_by(Year, Day)\n\n# Set marker size based on the size of Daily_Rainfall_Total\nmax_rainfall &lt;- max(Historical_Records2$Daily_Rainfall_Total)\nmin_rainfall &lt;- min(Historical_Records2$Daily_Rainfall_Total)\n\n# Calculate the range of marker sizes\nsize_range &lt;- c(1, 75)\n\n# Calculate normalized values for Daily_Rainfall_Total in [0, 1]\nnormalized_rainfall &lt;- (Historical_Records2$Daily_Rainfall_Total - min_rainfall) / (max_rainfall - min_rainfall)\n\n# Calculate marker size based on normalized values\nmarker_size &lt;- size_range[1] + normalized_rainfall * (size_range[2] - size_range[1])\n# Create a 2D scatter plot\nfig &lt;- plot_ly(december_rainfall_by_year, x = ~Year, y = ~Daily_Rainfall_Total,\n               marker = list(size = marker_size, \n                             color = ~Daily_Rainfall_Total, \n                             colorscale = \"Blues\",\n                             cmin = min_rainfall, # Set the minimum value\n                             cmax = max_rainfall, # Set the maximum value                             \n                             reversescale = TRUE, # Make the color gradient from light to dark\n                             showscale = TRUE),\n               hoverinfo = \"text\",\n               text = ~paste(\"Date: Dec \", Day, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Daily Rainfall Total:\", Daily_Rainfall_Total, \"mm\"),\n               hoverlabel = list(bgcolor = \"black\", font = list(color = \"white\")), # Set hover text color to white\n               type = 'scatter', # Set type to 'scatter'\n               mode = 'markers') # Set mode to 'markers'\n\n# Define layout for the plot\nfig &lt;- fig %&gt;% layout(xaxis = list(title = 'Year', tickvals = years_with_data),\n                      yaxis = list(title = 'Daily Rainfall Total (mm)', autorange = \"reversed\"),\n                      coloraxis = list(reversescale = TRUE),\n                      title = list(text = \"2D Scatter Plot: Daily Rainfall in Dec. (Singapore, Changi, 1983-2023)\",\n                                   xref = \"paper\",\n                                   xanchor = \"center\",\n                                   yanchor = \"middle\",\n                                   font = list(size = 15, weight = \"bold\")),\n                      # Include all years up to the current one\n                      xaxis = list(range = c(min(december_rainfall_by_year$Year), max(december_rainfall_by_year$Year))))\n                      \nfig\n\n\n\n\n\n\n\n\nShow the code: Animated Scatter Plot: Daily Rainfall in December (Singapore, Changi, 1983-2023)\n# Convert Year to factor to avoid treating it as a continuous variable\nHistorical_Records2$Year &lt;- as.factor(Historical_Records2$Year)\n\n# Create ggplot object\np &lt;- ggplot(Historical_Records2, aes(Year, Day, size = Daily_Rainfall_Total, color = Year, group = interaction(Year, Day))) +\n  geom_point() +\n  scale_x_discrete() +  # Use scale_x_discrete() instead of scale_x_log10()\n  scale_size(range = c(1, 15)) +  # Adjust the range to increase point size\n  theme_light() +\n  labs(title = 'Animated Scatter Plot: Daily Rainfall in December (Singapore, Changi, 1983-2023)', \n       x = 'Year', \n       y = 'Day in Dec.', \n       size = \"Rainfall\") +  # Modify labels accordingly\n  transition_states(Day, transition_length = 2, state_length = 1) +  # transition_states() instead of transition_time()\n  shadow_mark() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 12, hjust = 0.5),\n    axis.title = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(face = \"bold\", size = 10),\n    axis.text.y = element_text(size = 10), # Adjust Y axis text size\n    axis.ticks.y = element_line(color = \"black\"), # Adjust Y axis ticks\n    axis.line.y = element_line(color = \"black\"), # Adjust Y axis line color\n    axis.ticks.x = element_line(color = \"black\"), \n    axis.line.x = element_line(color = \"black\"),\n    panel.grid.major.y = element_line(color = \"gray96\", size = 0.5), # Y axis grid lines\n    panel.grid.major.x = element_line(color = \"gray96\", size = 0.5),\n    panel.grid.minor.y = element_blank() # Remove minor grid lines\n  ) +\n  scale_y_continuous(breaks = 1:31, expand = c(0, 0)) # Set Y axis breaks and remove expansion\n\n# Animate the plot\nanimate(p)",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-average-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-average-temperature",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.1 Monthly Average Temperature",
    "text": "2.1 Monthly Average Temperature\nFirstly, let’s observe the trends in the average of daily mean, maximum, and minimum temperatures recorded in December through the animated charts below.\n\nAnimated line chart: Mean & Max & Min temp. trend\n\n\n\n\nShow the code: Animated Line Chart: December Temperature Trends (Singapore, Changi)\n# Calculate the average temperature for each December\ndecember_data_temp &lt;- Historical_Records2 %&gt;%\n  group_by(Year) %&gt;%\n  summarise(Mean = mean(Mean_Temperature),\n            Max = mean(Maximum_Temperature),\n            Min = mean(Minimum_Temperature))\n\ndecember_data_temp &lt;- december_data_temp %&gt;%\n  pivot_longer(cols = starts_with(\"M\"),\n               names_to = \"Temperature.Type\",\n               values_to = \"Temperature\")\n\n# create animated chart for the december temp trend\nggplot(december_data_temp, aes(x = Year, y = Temperature, color = Temperature.Type, group = Temperature.Type)) +\n  geom_line(linewidth=1.2) +\n  geom_point(size = 3.5) + \n  geom_text(aes(label = sprintf(\"%.2f\", Temperature)), nudge_y = 0.5, show.legend = FALSE) + \n  scale_x_continuous(breaks = unique(december_data_temp$Year)) +\n  labs(x = \"Year\", y = \"Temperature (ºC)\") +\n  ggtitle(\"Animated Line Chart: December Temperature Trends (Singapore, Changi)\") +\n  theme_grey() +\n  shadow_mark() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 12, hjust = 0.5),\n    axis.title = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(face = \"bold\", size = 10),\n    axis.text.y = element_text(size = 10), # Adjust Y axis text size\n    axis.ticks.y = element_line(color = \"black\"), # Adjust Y axis ticks\n    axis.line.y = element_line(color = \"black\"), # Adjust Y axis line color\n    axis.ticks.x = element_line(color = \"black\"), \n    axis.line.x = element_line(color = \"black\")\n  ) +\n  scale_color_manual(values = c(\"Max\" = \"black\", \"Min\" = \"#28B463\", \"Mean\" = \"#3498DB\")) +\n  transition_reveal(Year)\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s explore more detailed data from the interactive chart below.\n\nInteractive area-line chart: Mean & Max & Min temp. trend\n\n\n\n\nShow the code: Area-line Chart: December Temperature Trends (Singapore, Changi)\naverages &lt;- december_data_temp %&gt;%\n  filter(Temperature.Type == \"Mean\") %&gt;%\n  select(Year, Temperature) \n\nmax_temps &lt;- december_data_temp %&gt;%\n  filter(Temperature.Type == \"Max\") %&gt;%\n  select(Year, Temperature)\n\nmin_temps &lt;- december_data_temp %&gt;%\n  filter(Temperature.Type == \"Min\") %&gt;%\n  select(Year, Temperature)\n\nranges &lt;- data.frame(\n  Year = max_temps$Year,\n  Min_Temperature = min_temps$Temperature,\n  Max_Temperature = max_temps$Temperature\n)\n\nhighchart() %&gt;%\n  hc_title(text = \"Area-line Chart: December Temperature Trends (Singapore, Changi)\", style = list(fontSize = '1.5em')) %&gt;%\n  hc_xAxis(categories = unique(ranges$Year), title = list(text = \"Year\")) %&gt;%\n  hc_yAxis(title = list(text = \"Temperature (ºC)\")) %&gt;%\n  hc_tooltip(useHTML = TRUE,crosshairs = TRUE, shared = TRUE, valueSuffix = \"ºC\", valueDecimals = 2) %&gt;%\n  hc_legend(itemStyle = list(fontWeight = \"bold\", fontSize = \"12px\"))%&gt;%\n  hc_series(\n    list(name = \"Mean\", data = averages$Temperature, zIndex = 1, \n         marker = list(fillColor = \"white\", lineWidth = 1, lineColor = \"red\" )),\n    list(name = \"Max\", data = ranges$Max_Temperature, zIndex = 1, \n         marker = list(fillColor = \"white\", lineWidth = 1, lineColor = \"#2E86C1\")),\n    list(name = \"Min\", data = ranges$Min_Temperature, zIndex = 1, \n         marker = list(fillColor = \"white\", lineWidth = 1, lineColor = \"green\")),\n    list(name = \"Temperature Range\", \n         data = cbind(ranges$Min_Temperature, ranges$Max_Temperature), \n         type = \"arearange\", lineWidth = 0, linkedTo = \":previous\", \n         color = \"#FDEBD0\", fillOpacity = 0.3, zIndex = 0, \n         marker = list(enabled = FALSE))\n  )%&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )\n\n\n\n\n\n\n\n\n\n\nObservation from the temperature trends charts:\nThere appears to be no significant variation in values from 1993 to 2013, as indicated by the nearly horizontal line during this period in the charts. However, when considering a longer time span, there is a notable increase in temperature values from 1983 to 2023. The temperature value in 2023 is significantly higher than that in 1983.\nRoughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.\n\nThen, let’s take a look at the volatility of the data. The error bar chart below illustrates the fluctuations in temperature values\n\nErrorbar Chart: Mean & Max & Min temp.\n\n\n\n\nShow the code: Error-bar Chart: December Temperature (Singapore, Changi)\n# Calculate sd\nsd_max &lt;- tapply(Historical_Records2$Maximum_Temperature, Historical_Records2$Year, sd)\nsd_mean &lt;- tapply(Historical_Records2$Mean_Temperature, Historical_Records2$Year, sd)\nsd_min &lt;- tapply(Historical_Records2$Minimum_Temperature, Historical_Records2$Year, sd)\n\nsd_data &lt;- bind_rows(\n  data.frame(Year = names(sd_max), sd_type = \"sd_max\", sd_value = sd_max),\n  data.frame(Year = names(sd_mean), sd_type = \"sd_mean\", sd_value = sd_mean),\n  data.frame(Year = names(sd_min), sd_type = \"sd_min\", sd_value = sd_min)\n)\n\nsd_data &lt;- sd_data %&gt;%\n  mutate(sd_type = factor(sd_type, levels = c(\"sd_mean\", \"sd_max\", \"sd_min\"))) %&gt;%\n  arrange(Year, sd_type)%&gt;%\n  select(-Year)\n  \ndecember_temp_sd_data &lt;- cbind(december_data_temp, sd_data)\ndecember_temp_sd_data$Year &lt;- as.character(december_temp_sd_data$Year)\n\n# create error-bar chart\nhchart(december_temp_sd_data, \"column\", hcaes(x = Year, y = Temperature, group = Temperature.Type), id = c(\"a\", \"b\", \"c\")) %&gt;%\n  hc_title(text = \"Error-bar Chart: December Temperature (Singapore, Changi)\", style = list(fontSize = '1.5em')) %&gt;%\n  hc_xAxis(categories = unique(december_temp_sd_data$Year), title = list(text = \"Year\")) %&gt;%\n  hc_yAxis(min = 20, max = 35, title = list(text = \"Temperature (ºC)\")) %&gt;%\n  hc_tooltip(useHTML = TRUE,crosshairs = TRUE,valueSuffix = \"ºC\", valueDecimals = 2) %&gt;%\n  hc_legend(itemStyle = list(fontWeight = \"bold\", fontSize = \"12px\"))%&gt;%\n  hc_add_series(\n    december_temp_sd_data,\n    \"errorbar\", \n    hcaes(y = Temperature, x = Year, low = Temperature - sd_value, high = Temperature + sd_value, group = Temperature.Type),\n    linkedTo = c(\"a\", \"b\", \"c\"),\n    enableMouseTracking = TRUE,\n    showInLegend = FALSE\n    )%&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )\n\n\n\n\n\n\n\n\n\n\nObservation from the error-bar chart:\nThe error bars for the maximum temperature are longest, while those for the mean and minimum temperatures are relatively short and similar. This indicates that the variability in maximum temperature is more pronounced, whereas the fluctuations in mean and minimum temperatures are comparatively smaller.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperture",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperture",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.2 Daily Mean Temperture",
    "text": "2.2 Daily Mean Temperture\nThe below heatmap shows the mean temperature in December from 1983 to 2023 by every decade.\n\n\nShow the code: Daily Mean Temperture in December (Changi, Singapore, 1983-2023)\n# Group by year\ndecember_daily_Temp_by_year &lt;- Historical_Records2 %&gt;%\n  group_by(Year, Day)\n\ndecember_daily_temp_by_year &lt;- december_daily_Temp_by_year %&gt;%\n  mutate(text = paste0(\"Date: \", \"Dec \", Day, \", \", Year, \"\\nDaily Mean Temp.: \", Mean_Temperature, \"ºC\"))\n\n# create heatmap\np4 &lt;- ggplot(december_daily_temp_by_year, aes(Day, Year, fill = Mean_Temperature, text = text)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"RdYlBu\",limits = c(24, 30)) +\n  labs(\n    title = \"December Daily Mean Temperture (Changi, Singapore, 1983-2023)\",\n    x = \"Day in December\",\n    y=\"Year\",\n    fill=\"Temp. (ºC)\"\n  )+\n  scale_x_continuous(breaks = 1:31)+\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.ontop = TRUE,\n    plot.title = element_text(face = \"bold\", margin = margin(b = 40),hjust = 0.5),  \n    axis.title.y = element_text(face = \"bold\"),  \n    axis.title.x = element_text(face = \"bold\"),\n    legend.title = element_text(face = \"bold\")\n  ) \n\nggplotly(p4, tooltip = \"text\")\n\n\n\n\n\n\n\n\n\n\n\n\nObservation from the above heatmap chart:\n\n\n\n\nFrom bottom to top, the number of blue blocks decreases noticeably, indicating that hot days in December were increasing.\nFrom 1983 to 1993 and from 2013 to 2023, the number of blue blocks significantly decreases, demonstrating substantial weather changes in these two decades.\nIn 2023, there are no blue blocks, indicating severe temperatures in recent years.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-total-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#monthly-total-rainfall",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.1 Monthly Total Rainfall",
    "text": "3.1 Monthly Total Rainfall\n\n\nShow the code: Area Chart: December Daily Rainfall (Singapore, Changi)\nhc_rainfall &lt;- highchart() %&gt;%\n  hc_title(text=\"Area Chart: December Daily Rainfall (Singapore, Changi)\", style = list(fontSize = '1.5em'))%&gt;%\n  hc_xAxis(categories = 1:31, title = list(text = \"Day in December\")) %&gt;%\n  hc_yAxis(title = list(text = \"Daily Rainfall Total (mm)\"), min = 22,  max = 30, tickInterval = 2) %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"1983\", ], type = \"area\", name = \"1983\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"1993\", ], type = \"area\", name = \"1993\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"2003\", ], type = \"area\", name = \"2003\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"2013\", ], type = \"area\", name = \"2013\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"2023\", ], type = \"area\", name = \"2023\") %&gt;%\n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = \"&lt;br/&gt;Dec {point.x}, Rainfall: {point.y} mm\"\n  )%&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )\n\nhc_rainfall",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-total-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-total-rainfall",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.2 Daily Total Rainfall",
    "text": "3.2 Daily Total Rainfall\n\nInteractive “Rainfall” Chart\n\n\n\n\nShow the code: Scatter Plot: December Daily Rainfall (Singapore, Changi)\n# Calculate the list of years (displaying only years with data)\nyears_with_data &lt;- unique(Historical_Records2$Year)\n\n# Filter data by year\ndecember_rainfall_by_year &lt;- Historical_Records2 %&gt;%\n  filter(Year %in% years_with_data) %&gt;%\n  group_by(Year, Day)\n\n# Set marker size based on the size of Daily_Rainfall_Total\nmax_rainfall &lt;- max(Historical_Records2$Daily_Rainfall_Total)\nmin_rainfall &lt;- min(Historical_Records2$Daily_Rainfall_Total)\n\n# Calculate the range of marker sizes\nsize_range &lt;- c(1, 30)\n\n# Calculate normalized values for Daily_Rainfall_Total in [0, 1]\nnormalized_rainfall &lt;- (Historical_Records2$Daily_Rainfall_Total - min_rainfall) / (max_rainfall - min_rainfall)\n\n# Calculate marker size based on normalized values\nmarker_size &lt;- size_range[1] + normalized_rainfall * (size_range[2] - size_range[1])\n\n# Create a 2D scatter plot\nfig &lt;- plot_ly(december_rainfall_by_year, x = ~Year, y = ~Daily_Rainfall_Total,\n               marker = list(size = marker_size, \n                             color = ~Daily_Rainfall_Total, \n                             colorscale = \"Blues\",\n                             cmin = min_rainfall, # Set the minimum value\n                             cmax = max_rainfall, # Set the maximum value                       \n                             reversescale = TRUE, # Make the color gradient from light to dark\n                             showscale = TRUE,\n                             colorbar = list(title = \"Rainfall (mm)\", len = 0.5, thickness = 20)),\n               hoverinfo = \"text\",\n               text = ~paste(\"Date: Dec \", Day, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Daily Rainfall Total:\", Daily_Rainfall_Total, \"mm\"),\n               type = 'scatter', # Set type to 'scatter'\n               mode = 'markers') # Set mode to 'markers'\n\n# Define layout for the plot\nfig &lt;- fig %&gt;% layout(autosize = TRUE,width = 400,height = 450,\n                      title = list(text = \"&lt;b&gt;December Daily Rainfall(Singapore, Changi)&lt;b&gt;\", font = list(size = 13.5, color = \"black\")),\n                      xaxis = list(title = 'Year', \n                                   tickvals = years_with_data),\n                      yaxis = list(title = 'Daily Rainfall Total (mm)', \n                                   autorange = \"reversed\", showgrid = FALSE),\n                      hoverlabel = list(bgcolor = 'white', \n                            bordercolor = 'dodgerblue',\n                            font = list(color = 'dodgerblue',\n                                        family = \"Arial\",\n                                        size = 12,\n                                        bold = TRUE),\n                            align = \"left\"\n                            )\n                      )\n                      \nfig",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperature",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#daily-mean-temperature",
    "title": "Be Weatherwise or Otherwise",
    "section": "2.2 Daily Mean Temperature",
    "text": "2.2 Daily Mean Temperature\nNow, let’s explore the changes in mean temperature for each day in December. Let’s start by taking a look at the following polar-line chart.\n\nInteractive Polar-line Chart\n\n\n\n\nShow the code: Polar-line Chart: December Daily Mean Temperature Comparison (Singapore, Changi)\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\n# create Polar-line chart\nhighchart() %&gt;%\n  hc_chart(polar = TRUE) %&gt;%\n  hc_title(text = \"Polar-line Chart: December Daily Mean Temperature Comparison (Singapore, Changi)\",\n           style = list(fontSize = '1.5em')) %&gt;%\n  hc_xAxis(categories = 0:31) %&gt;%\n  hc_yAxis(labels = list(format = \"{value} °C\")) %&gt;%\n  hc_tooltip(useHTML = TRUE,crosshairs = TRUE, valueDecimals = 2) %&gt;%\n  hc_add_series(data = subset(Historical_Records2, Year %in% c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\")),\n                type = \"line\", hcaes(x = Day, y = Mean_Temperature, group = Year),\n                tooltip = list(pointFormat = \"Dec {point.x}, Temperature: {point.y} ºC\"),\n                zIndex = 1) %&gt;%\n  hc_chart(borderColor = '#757575',\n           borderRadius = 10,\n           borderWidth = 2,\n           backgroundColor = list(\n             linearGradient = c(0, 0, 500, 500),\n             stops = list(\n               list(0, 'rgb(250, 250, 250)'),\n               list(1, 'rgb(189, 189, 189)')\n             )))\n\n\n\n\n\n\n\n\n\n\nObservation from the polar-line chart:\nFrom a rough glance, the polar-line for 2023 is on the outermost circle, while the polar-line for 1983 is on the innermost circle. This implies that for most days in December 2023, the average temperature is higher compared to the same days in 1983. This further confirms the conclusion drawn earlier regarding the rise in temperatures.\n\n\nInteractive Heatmap\n\n\n\n\nShow the code: Heatmap: December Daily Mean Temperture (Singapore, Changi)\nhchart(Historical_Records2, type = \"heatmap\", hcaes(x = Day, y = Year, value = Mean_Temperature)) %&gt;%\n  hc_xAxis(categories = 0:31, title = list(text = \"Day in December\")) %&gt;%\n  hc_yAxis(categories = unique(Historical_Records2$Year), title = list(text = \"Year\")) %&gt;%\n  hc_legend(enabled = TRUE) %&gt;%\n  hc_colorAxis(stops = color_stops(n = 10, colors = rev(hcl.colors(n = 10, palette = \"RdYlBu\")))) %&gt;%\n  hc_legend(align = 'right',\n            layout = 'vertical',\n            margin = 20,\n            verticalAlign = 'top',\n            y = 20,\n            reversed = TRUE,\n            symbolHeight = 200) %&gt;%\n  hc_tooltip(useHTML = TRUE, pointFormat = \"&lt;br/&gt;Dec {point.x}, Temperature: {point.value} ºC\",valueDecimals = 2) %&gt;%\n  hc_title(text = 'Heatmap: December Daily Mean Temperture (Singapore, Changi)', style = list(fontSize = '1.5em')) %&gt;%\n  hc_responsive(rules = list(list(condition = list(maxWidth = 500), \n                                  chartOptions = list(yAxis = \n                                                        list(labels = \n                                                               list(format = '{substr value 0 1}'))))))\n\n\n\n\n\n\n\n\n\n\nObservation from the heatmap:\nFrom bottom (1983) to top (2023), the number of blue-green blocks decreases noticeably, indicating that hot days in December were increasing. The deep orange-red blocks are significantly more prevalent in 2023 than in other years, suggesting a clear trend of rising temperatures throughout December.\n\n\n\nConclusion\nFrom the visualization above, we can infer that the data observed in the Singapore Changi region from 1983 to 2023 indicate a clear upward trend in temperature. Comparing 2023 to 40 years ago, there has been a significant increase of 2°C. Such a difference is notable both in terms of human perception and its impact on the environment. See: Impact Of Climate Change In Singapore\n\n\nNext, let’s take a look at the rainfall.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#packedbubble-chart",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#packedbubble-chart",
    "title": "Be Weatherwise or Otherwise",
    "section": "Packedbubble Chart",
    "text": "Packedbubble Chart\n\n\nShow the code: Packedbubble Chart: December Daily Rainfall (Singapore, Changi)\nhc_pb &lt;- hchart(Historical_Records2, \"packedbubble\", hcaes(name = Day, value = Daily_Rainfall_Total, group = Year))\n\nq95 &lt;- as.numeric(quantile(Historical_Records2$Daily_Rainfall_Total, .95))\n\nhc_pb %&gt;% \n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = \"&lt;b&gt;Dec {point.name}:&lt;/b&gt; {point.value} mm\"\n  ) %&gt;% \n  hc_title(text = 'Packedbubble Chart: December Daily Rainfall (Singapore, Changi)',\n           style = list(fontSize = '1.5em')) %&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )%&gt;%\n  hc_plotOptions(\n    packedbubble = list(\n      maxSize = \"150%\",\n      zMin = 0,\n      layoutAlgorithm = list(\n        gravitationalConstant =  0.05,\n        splitSeries =  TRUE, # TRUE to group points\n        seriesInteraction = TRUE,\n        dragBetweenSeries = TRUE,\n        parentNodeLimit = TRUE\n      ),\n      dataLabels = list(\n        enabled = TRUE,\n        format = \"{point.value}mm\",\n        filter = list(\n          property = \"y\",\n          operator = \"&gt;\",\n          value = q95\n        ),\n        style = list(\n          color = \"black\",\n          textOutline = \"none\",\n          fontWeight = \"normal\"\n        )\n      )\n    ))\n\n\n\n\n\n\n\nAnimated Scatter PlotInteractive Scatter Plot\n\n\n\n\nShow the code: Animated Scatter Plot: December Daily Rainfall(Singapore, Changi)\n# Convert Year to factor to avoid treating it as a continuous variable\nHistorical_Records2$Year &lt;- as.factor(Historical_Records2$Year)\n\n# Create ggplot object\np &lt;- ggplot(Historical_Records2, aes(Year, Day, size = Daily_Rainfall_Total, color = Year, group = interaction(Year, Day))) +\n  geom_point() +\n  scale_x_discrete() +  # Use scale_x_discrete() instead of scale_x_log10()\n  scale_size(range = c(0,15))+\n  theme_bw() +\n  labs(title = 'Animated Scatter Plot: December Daily Rainfall(Singapore, Changi)', \n       x = 'Year', \n       y = 'Day in December', \n       size = \"Rainfall (mm)\") +  # Modify labels accordingly\n  transition_states(Day, transition_length = 2, state_length = 1) +  # transition_states() instead of transition_time()\n  shadow_mark() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 12, hjust = 0.5),\n    axis.title = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(face = \"bold\", size = 10),\n    axis.text.y = element_text(size = 10), # Adjust Y axis text size\n    axis.ticks.y = element_line(color = \"black\"), # Adjust Y axis ticks\n    axis.line.y = element_line(color = \"black\"), # Adjust Y axis line color\n    axis.ticks.x = element_line(color = \"black\"), \n    axis.line.x = element_line(color = \"black\")\n  ) +\n  scale_y_continuous(breaks = 1:31, expand = c(0, 0)) # Set Y axis breaks and remove expansion\n\n# Animate the plot\nanimate(p)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Interactive Scatter Plot: December Daily Rainfall (Singapore, Changi)\n# Create ggplot object with simplified aes parameters\np &lt;- ggplot(Historical_Records2, aes(Year, Day, color = Year)) +\n  geom_point(aes(size = Daily_Rainfall_Total)) +\n  scale_x_discrete() +  \n  scale_size(range = c(0,15))+\n  theme_bw() +\n  labs(title = 'Interactive Scatter Plot: December Daily Rainfall (Singapore, Changi)', \n       x = 'Year', \n       y = 'Day in Dec.') +  \n  transition_states(Day, transition_length = 2, state_length = 1) +  \n  shadow_mark() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(face = \"bold\",size = 10, hjust = 0.5),\n    axis.title = element_text(face = \"bold\",size = 8),\n    legend.title = element_text(face = \"bold\",size = 8),\n    axis.text.y = element_text(size = 10),\n    axis.ticks.y = element_line(color = \"black\"),\n    axis.line.y = element_line(color = \"black\"),\n    axis.ticks.x = element_line(color = \"black\"), \n    axis.line.x = element_line(color = \"black\")\n  ) +\n  scale_y_continuous(breaks = 1:31, expand = c(0, 0))\n\n# Convert ggplot object to plotly\np_plotly &lt;- ggplotly(p, tooltip = c(\"Day\", \"Daily_Rainfall_Total\"))\n\n# Add point size legend manually\np_plotly &lt;- p_plotly %&gt;% \n  layout(\n    autosize = TRUE,width = 600,height = 800,\n    showlegend = TRUE,\n         legend = list(\n           title = list(text = \"Year\"),\n           itemsizing = \"constant\",\n           itemwidth = 50\n         ))\n\n# Show the interactive plot\np_plotly",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-area-line-chart-mean-max-min",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-area-line-chart-mean-max-min",
    "title": "Be Weatherwise or Otherwise",
    "section": "Interactive area-line chart: Mean & Max & Min",
    "text": "Interactive area-line chart: Mean & Max & Min\n\n\nShow the code: Area-line Chart: December Mean Temperature Trend (Singapore, Changi)\naverages &lt;- december_avg_temp2 %&gt;%\n  filter(Temperature_Type == \"Dec_Mean_Temp\") %&gt;%\n  select(Year, Temperature) \n\nmax_temps &lt;- december_avg_temp2 %&gt;%\n  filter(Temperature_Type == \"Dec_Max_Temp\") %&gt;%\n  select(Year, Temperature)\n\nmin_temps &lt;- december_avg_temp2 %&gt;%\n  filter(Temperature_Type == \"Dec_Min_Temp\") %&gt;%\n  select(Year, Temperature)\n\nranges &lt;- data.frame(\n  Year = max_temps$Year,\n  Min_Temperature = min_temps$Temperature,\n  Max_Temperature = max_temps$Temperature\n)\n\nhighchart() %&gt;%\n  hc_title(text = \"Area-line Chart: December Mean Temperature Trend (Singapore, Changi)\", style = list(fontSize = '1.5em')) %&gt;%\n  hc_xAxis(categories = unique(ranges$Year), title = list(text = \"Year\")) %&gt;%\n  hc_yAxis(title = list(text = \"Temp. (ºC)\")) %&gt;%\n  hc_tooltip(crosshairs = TRUE, shared = TRUE, valueSuffix = \"ºC\") %&gt;%\n  hc_series(\n    list(name = \"Mean Temp.\", data = averages$Temperature, zIndex = 1, \n         marker = list(fillColor = \"white\", lineWidth = 1 )),\n    list(name = \"Max Temp.\", data = ranges$Max_Temperature, zIndex = 1, \n         marker = list(fillColor = \"white\", lineWidth = 1)),\n    list(name = \"Min Temp.\", data = ranges$Min_Temperature, zIndex = 1, \n         marker = list(fillColor = \"white\", lineWidth = 1)),\n    list(name = \"Temperature Range\", \n         data = cbind(ranges$Min_Temperature, ranges$Max_Temperature), \n         type = \"arearange\", lineWidth = 0, linkedTo = \":previous\", \n         color = \"#FDEBD0\", fillOpacity = 0.3, zIndex = 0, \n         marker = list(enabled = FALSE))\n  )%&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )\n\n\n\n\n\n\n\nObservation from the above animated charts:\nFor temperature, it seems that there is no discernible change from 1993 to 2013, as indicated by the similar colors of the histograms in those years (1993, 2003, and 2013). However, when examining a broader time span, there is a notable increase from 1983 to 2023. The histogram color for 2023 is significantly darker compared to that of 1983.\nRoughly speaking, the average temperature increased by 1ºC from 1983 to 1993, remained relatively stable from 1993 to 2013, and then rose by another 1 ºC from 2013 to 2023.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-polar-line-chart",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-polar-line-chart",
    "title": "Be Weatherwise or Otherwise",
    "section": "Interactive Polar-line Chart",
    "text": "Interactive Polar-line Chart\n\n\nShow the code: Polar-line Chart: December Daily Mean Temperature Comparison (Singapore, Changi)\n# Group by year\ndecember_daily_Temp_by_year &lt;- Historical_Records2 %&gt;%\n  group_by(Year, Day)\n\n# define animateSVGPath function\nanimateSVGPath &lt;- function(svgElem, animation, callback = NULL) {\n  length &lt;- svgElem$element$getTotalLength()\n  steps &lt;- 100\n  intervals &lt;- seq(0, length, length / steps)\n  for (i in seq_along(intervals)[-1]) {\n    Sys.sleep(animation$duration / steps) \n    svgElem %&gt;%\n      hc_attr('stroke-dasharray', sprintf(\"%f, %f\", intervals[i], length - intervals[i])) %&gt;%\n      hc_animate(list('stroke-dashoffset' = intervals[i]), list(duration = 0.1), NULL)\n  }\n}\n\n\n\n# process data\nprocessed_data &lt;- december_daily_Temp_by_year %&gt;%\n  group_by(Year) %&gt;%\n  mutate(name = as.character(Year)) %&gt;%\n  ungroup() %&gt;%\n  select(-Year) %&gt;%\n  rename(y = Mean_Temperature, x = Day)\n\n# create Radar Chart\nhc2 &lt;- highchart() %&gt;%\n  hc_title(text=\"Polar-line Chart: December Daily Mean Temperature Comparison (Singapore, Changi)\", style = list(fontSize = '1.5em'))%&gt;%\n  hc_xAxis(categories = 0:31) %&gt;%\n  hc_yAxis(labels = list(format = \"{value} °C\")) %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"1983\", ], type = \"line\", name = \"1983\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"1993\", ], type = \"line\", name = \"1993\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"2003\", ], type = \"line\", name = \"2003\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"2013\", ], type = \"line\", name = \"2013\") %&gt;%\n  hc_add_series(data = processed_data[processed_data$name == \"2023\", ], type = \"line\", name = \"2023\") %&gt;%\n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = \"&lt;br/&gt;Dec {point.x}, Temperature: {point.y} ºC\"\n  )%&gt;%\n  hc_chart(\n    polar = TRUE,\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )\n\nhc2",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-heatmap",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#interactive-heatmap",
    "title": "Be Weatherwise or Otherwise",
    "section": "Interactive Heatmap",
    "text": "Interactive Heatmap\n\n\nShow the code: Heatmap: December Daily Mean Temperture (Singapore, Changi)\nHistorical_Records2$Year &lt;- as.character(Historical_Records2$Year)\n\nHistorical_Records3 &lt;- data.frame(\n  Year = Historical_Records2$Year,\n  Day = rep(1:31, times = 5),\n  Mean_Temperature = Historical_Records2$Mean_Temperature)\n\nexisting_years &lt;- c(1983, 1993, 2003, 2013, 2023)\n\nhchart(Historical_Records3, type = \"heatmap\", hcaes(x = Day, y = Year, value = Mean_Temperature)) %&gt;%\n  hc_xAxis(categories = 0:31, title = list(text = \"Day in December\")) %&gt;%\n  hc_yAxis(\n    categories = existing_years,  \n    title = list(text = \"Year\")\n  ) %&gt;%\n  hc_legend(enabled = TRUE) %&gt;%\n  hc_colorAxis(\n    stops = color_stops(n = 10, colors = rev(hcl.colors(n = 10, palette = \"RdYlBu\")))\n  ) %&gt;%\n  hc_legend(align = 'right',\n            layout = 'vertical',\n            margin = 20,\n            verticalAlign = 'top',\n            y = 20,\n            reversed = TRUE,\n            symbolHeight = 200) %&gt;%\n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = \"&lt;br/&gt;Dec {point.x}, Temperature: {point.value} ºC\"\n  ) %&gt;%\n  hc_title(text = 'Heatmap: December Daily Mean Temperture (Singapore, Changi)',\n           style = list(fontSize = '1.5em')) %&gt;%\n  hc_responsive(rules = list(list(condition = list(maxWidth = 500),\n                                  chartOptions = list(\n                                    yAxis = list(\n                                      labels = list(\n                                        format = '{substr value 0 1}'))))))%&gt;%\n\n  hc_chart(accessibility = list(pointDescriptionFormatter = JS(\"function(point) {return '&lt;b&gt;' + point.x + '&lt;/b&gt; sales &lt;b&gt;' + point.y + '&lt;/b&gt;, ' + point.value + '.';}\")))\n\n\n\n\n\n\n\nObservation from the interactive line chart and heatmap:\n\nFrom bottom to top, the number of blue blocks decreases noticeably, indicating that hot days in December were increasing.\nFrom 1983 to 1993 and from 2013 to 2023, the number of blue blocks significantly decreases, demonstrating substantial weather changes in these two decades.\nIn 2023, there are no blue blocks, indicating severe temperatures in recent years.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#then-the-historical_records.csv-was-processed-as-follows",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#then-the-historical_records.csv-was-processed-as-follows",
    "title": "Be Weatherwise or Otherwise",
    "section": "Then, the Historical_Records.csv was processed as follows:",
    "text": "Then, the Historical_Records.csv was processed as follows:\n\nSince all data originated from Changi station, columns “Station” were removed.\nColumns “Highest 30 Min Rainfall (mm)”, “Highest 60 Min Rainfall (mm)”, and “Highest 60 Min Rainfall (mm)” contained data only for December 2023, with insufficient data for comparison; hence, these three columns were deleted.\nChange the format of column names. For example, replace “Daily.Rainfall.Total..mm.” with “Daily_Rainfall_Total”.\nThe following analysis is solely focused on temperature and rainfall; therefore, the column “Mean Wind Speed” and “Max Wind Speed” are also excluded.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#polar-scatter-chart",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#polar-scatter-chart",
    "title": "Be Weatherwise or Otherwise",
    "section": "Polar-scatter Chart",
    "text": "Polar-scatter Chart\n\n\nShow the code: Polar-scatter Chart: December Daily Rainfall Comparison (Singapore, Changi)\n# Extract rainfall data for each year\nrainfall_1983 &lt;- subset(Historical_Records2, Year == 1983)\nrainfall_1993 &lt;- subset(Historical_Records2, Year == 1993)\nrainfall_2003 &lt;- subset(Historical_Records2, Year == 2003)\nrainfall_2013 &lt;- subset(Historical_Records2, Year == 2013)\nrainfall_2023 &lt;- subset(Historical_Records2, Year == 2023)\n\nhc_rainfall &lt;- highchart() %&gt;%\n  hc_chart(\n    type = \"scatter\",\n    polar = TRUE,\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n      )\n    )\n  ) %&gt;%\n  hc_title(text = \"Polar-scatter Chart: December Daily Rainfall Comparison (Singapore, Changi)\") %&gt;%\n  hc_xAxis(\n    categories = 0:31,\n    labels = list(format = \"{value}\") # Set x-axis labels format\n  ) %&gt;%\n  hc_yAxis(\n    labels = list(\n      format = \"{value} mm\",\n      style = list(\n        color = \"#333333\" # Set y-axis labels color\n      )\n    ),\n    tickPositions = c(0, 25, 50, 100, 150, 200) # Set y-axis tick positions\n  )\n\n# Add bubble series for each year\nhc_rainfall &lt;- hc_rainfall %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_1983$Day, y = rainfall_1983$Daily_Rainfall_Total, size = rainfall_1983$Daily_Rainfall_Total),\n    name = \"1983\",\n    color = \"rgba(255, 165, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_1993$Day, y = rainfall_1993$Daily_Rainfall_Total, size = rainfall_1993$Daily_Rainfall_Total),\n    name = \"1993\",\n    color = \"rgba(0, 128, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_2003$Day, y = rainfall_2003$Daily_Rainfall_Total, size = rainfall_2003$Daily_Rainfall_Total),\n    name = \"2003\",\n    color = \"rgba(0, 0, 255, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_2013$Day, y = rainfall_2013$Daily_Rainfall_Total, size = rainfall_2013$Daily_Rainfall_Total),\n    name = \"2013\",\n    color = \"rgba(255, 0, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_2023$Day, y = rainfall_2023$Daily_Rainfall_Total, size = rainfall_2023$Daily_Rainfall_Total),\n    name = \"2023\",\n    color = \"rgba(255, 255, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  )\n\nhc_rainfall",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#december-total-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#december-total-rainfall",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.1 December Total Rainfall",
    "text": "3.1 December Total Rainfall\n\nInteractive Bar Chart\n\n\n\n\nShow the code: Bar Chart: December Total Rainfall (Singapore, Changi)\nhighchart() %&gt;%\n  hc_chart(type = \"column\") %&gt;%\n  hc_xAxis(categories = december_data$Year, title = list(text = \"Year\")) %&gt;%\n  hc_yAxis(title = list(text = \"Rainfall (mm)\")) %&gt;%\n  hc_title(text = \"Bar Chart: December Total Rainfall (Singapore, Changi)\",\n           style = list(fontSize = '1.5em')) %&gt;%\n  hc_add_series(december_data, \"column\", hcaes(x = Year, y = Dec_Rainfall_Total, color = Dec_Rainfall_Total)) %&gt;%\n  hc_add_series(december_data, \"line\", hcaes(x = Year, y = Dec_Rainfall_Total, color = Dec_Rainfall_Total), yAxis = 0) %&gt;%\n  hc_tooltip(useHTML = TRUE, pointFormat = \"&lt;b&gt;Total rainfall: {point.y} mm&lt;b&gt;\",valueDecimals = 2) %&gt;%\n  hc_colorAxis(minColor = \"#EBF5FB\", maxColor = \"#2E86C1\", stops = color_stops(n = 10)) %&gt;%\n  hc_chart(borderColor = '#757575',\n           borderRadius = 10,\n           borderWidth = 2,\n           backgroundColor = list(\n             linearGradient = c(0, 0, 500, 500),\n             stops = list(\n               list(0, 'rgb(250, 250, 250)'),\n               list(1, 'rgb(189, 189, 189)')\n             ))) %&gt;%\n  hc_plotOptions(column = list(dataLabels = list(enabled = TRUE)),\n                 line = list(marker = list(enabled = TRUE)))\n\n\n\n\n\n\n\n\n\n\nObservation from the bar chart:\nThe chart above doesn’t show a clear trend. The total rainfall fluctuates between high and low for these five years, but what we can see is that the total rainfall in December 2023 is the lowest compared to the other years.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#december-daily-rainfall",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#december-daily-rainfall",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.2 December Daily Rainfall",
    "text": "3.2 December Daily Rainfall\nFirst, let’s take a look at which days in December were raining through an interesting animated plot. You can also explore the detailed data of daily rainfall through the corresponding interactive graph.\n\nAnimated Scatter PlotInteractive Scatter Plot\n\n\n\n\nShow the code: Animated Scatter Plot: December Daily Rainfall(Singapore, Changi)\n# Convert Year to factor to avoid treating it as a continuous variable\n#Historical_Records2$Year &lt;- as.factor(Historical_Records2$Year)\n\n# Create ggplot object\np &lt;- ggplot(Historical_Records2, aes(Year, Day, size = Daily_Rainfall_Total, color = Year, group = interaction(Year, Day))) +\n  geom_point() +\n  scale_x_discrete() +\n  scale_size(range = c(0,15))+\n  theme_bw() +\n  labs(title = 'Animated Scatter Plot: December Daily Rainfall(Singapore, Changi)', \n       x = 'Year', \n       y = 'Day in December', \n       size = \"Rainfall (mm)\") +  # Modify labels accordingly\n  transition_states(Day, transition_length = 2, state_length = 1) + \n  shadow_mark() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(face = \"bold\", size = 12, hjust = 0.5),\n    axis.title = element_text(face = \"bold\", size = 10),\n    legend.title = element_text(face = \"bold\", size = 10),\n    axis.text.y = element_text(size = 10), # Adjust Y axis text size\n    axis.ticks.y = element_line(color = \"black\"), # Adjust Y axis ticks\n    axis.line.y = element_line(color = \"black\"), # Adjust Y axis line color\n    axis.ticks.x = element_line(color = \"black\"), \n    axis.line.x = element_line(color = \"black\")\n  ) +\n  scale_y_continuous(breaks = 1:31, expand = c(0, 0)) \nanimate(p)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code: Interactive Scatter Plot: December Daily Rainfall (Singapore, Changi)\n# Create ggplot \np &lt;- ggplot(Historical_Records2, aes(Year, Day, color = Year)) +\n  geom_point(aes(size = Daily_Rainfall_Total)) +\n  scale_x_discrete() +  \n  scale_size(range = c(0,15))+\n  theme_bw() +\n  labs(title = 'Interactive Scatter Plot: December Daily Rainfall (Singapore, Changi)', \n       x = 'Year', \n       y = 'Day in Dec.') +  \n  transition_states(Day, transition_length = 2, state_length = 1) +  \n  shadow_mark() +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.title = element_text(face = \"bold\",size = 10, hjust = 0.5),\n    axis.title = element_text(face = \"bold\",size = 8),\n    legend.title = element_text(face = \"bold\",size = 8),\n    axis.text.y = element_text(size = 10),\n    axis.ticks.y = element_line(color = \"black\"),\n    axis.line.y = element_line(color = \"black\"),\n    axis.ticks.x = element_line(color = \"black\"), \n    axis.line.x = element_line(color = \"black\")\n  ) +\n  scale_y_continuous(breaks = 1:31, expand = c(0, 0))\n\nggplotly(p, tooltip = c(\"Day\", \"Daily_Rainfall_Total\")) %&gt;%\n  layout(\n    #autosize = TRUE,width = 600,height = 800,\n    showlegend = TRUE,\n         legend = list(\n           title = list(text = \"Year\"),\n           itemsizing = \"constant\",\n           itemwidth = 50\n         ))\n\n\n\n\n\n\n\n\n\n\nObservation from the scatter plot:\nWhile there isn’t a clear trend in the data for December in 1993, 2003, and 2013, it’s evident that December 2023 had more rainy days compared to December 1983. This is visually represented on the graph by more data points for 2023 than for 1983.\n\nNext, let’s dig into it. Take a look at the area chart below.\n\nArea Chart: December Daily Rainfall\n\n\n\n\nShow the code: Area Chart: December Daily Rainfall (Singapore, Changi)\nhighchart() %&gt;%\n  hc_add_series(data = subset(Historical_Records2, Year %in% c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\")),\n                type = \"area\", hcaes(x = Day, y = Daily_Rainfall_Total, group = Year),\n                zIndex = 1) %&gt;%\n  hc_title(text=\"Area Chart: December Daily Rainfall (Singapore, Changi)\", style = list(fontSize = '1.5em'))%&gt;%\n  hc_xAxis(categories = 0:31, title = list(text = \"Day in December\")) %&gt;%\n  hc_yAxis(title = list(text = \"Rainfall (mm)\")) %&gt;%\n  hc_tooltip(\n    useHTML = TRUE,crosshairs = TRUE,valueDecimals = 2,\n    pointFormat = \"&lt;br/&gt;Dec {point.x}, Rainfall: {point.y} mm\"\n  )%&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )))\n\n\n\n\n\n\n\n\n\n\nObservation from the area chart:\nWhile there’s no obvious trend, it seems like 2023 had less rainfall compared to other years(with the smallest area). Also, the biggest rain days in December for other years had much more rain than the biggest day in 2023. One standout is the heavy rainfall on December 25th, 1983.\n\n\nPolar-scatter Chart\n\n\n\n\nShow the code: Polar-scatter Chart: December Daily Rainfall Comparison (Singapore, Changi)\n# Extract rainfall data for each year\nrainfall_1983 &lt;- subset(Historical_Records2, Year == 1983)\nrainfall_1993 &lt;- subset(Historical_Records2, Year == 1993)\nrainfall_2003 &lt;- subset(Historical_Records2, Year == 2003)\nrainfall_2013 &lt;- subset(Historical_Records2, Year == 2013)\nrainfall_2023 &lt;- subset(Historical_Records2, Year == 2023)\n\nhighchart() %&gt;%\n  hc_chart(\n    type = \"scatter\",\n    polar = TRUE,\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n      )\n    )\n  ) %&gt;%\n  hc_title(text = \"Polar-scatter Chart: December Daily Rainfall Comparison (Singapore, Changi)\") %&gt;%\n  hc_xAxis(\n    categories = 0:31,\n    labels = list(format = \"{value}\") # Set x-axis labels format\n  ) %&gt;%\n  hc_yAxis(\n    labels = list(\n      format = \"{value} mm\",\n      style = list(\n        color = \"#333333\" # Set y-axis labels color\n      )\n    ),\n    tickPositions = c(0, 25, 50, 100, 150, 200) # Set y-axis tick positions\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_1983$Day, y = rainfall_1983$Daily_Rainfall_Total, size = rainfall_1983$Daily_Rainfall_Total),\n    name = \"1983\",\n    color = \"rgba(255, 165, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_1993$Day, y = rainfall_1993$Daily_Rainfall_Total, size = rainfall_1993$Daily_Rainfall_Total),\n    name = \"1993\",\n    color = \"rgba(0, 128, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_2003$Day, y = rainfall_2003$Daily_Rainfall_Total, size = rainfall_2003$Daily_Rainfall_Total),\n    name = \"2003\",\n    color = \"rgba(0, 0, 255, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_2013$Day, y = rainfall_2013$Daily_Rainfall_Total, size = rainfall_2013$Daily_Rainfall_Total),\n    name = \"2013\",\n    color = \"rgba(255, 0, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  ) %&gt;%\n  hc_add_series(\n    data = data.frame(x = rainfall_2023$Day, y = rainfall_2023$Daily_Rainfall_Total, size = rainfall_2023$Daily_Rainfall_Total),\n    name = \"2023\",\n    color = \"rgba(255, 255, 0, 0.5)\", # Set transparency\n    marker = list(symbol = \"circle\"),\n    tooltip = list(pointFormat = \"&lt;b&gt;Dec {point.x}&lt;b&gt;: {point.y} mm\")\n  )\n\n\n\n\n\n\n\n\n\n\nObservation from the above polar-scatter chart:\nIn December, most days see rainfall below 50mm, with the majority experiencing less than 25mm. However, there are a few days of heavy rain, with some exceeding 100mm and even 150mm.\n\nMoving forward, let’s examine the daily rainfall and total rainfall for December together.\n\nInteractive Chart: Daily Rainfall & Total Rainfall\n\n\n\n\nShow the code: Scatter-Bar Chart: December Daily Rainfall and Total Rainfall (Singapore, Changi)\n# Set marker size based on the size of Daily_Rainfall_Total\nmax_rainfall &lt;- max(Historical_Records2$Daily_Rainfall_Total)\nmin_rainfall &lt;- min(Historical_Records2$Daily_Rainfall_Total)\n\n# Calculate the range of marker sizes\nsize_range &lt;- c(1, 40)\n\n# Calculate normalized values for Daily_Rainfall_Total in [0, 1]\nnormalized_rainfall &lt;- (Historical_Records2$Daily_Rainfall_Total - min_rainfall) / (max_rainfall - min_rainfall)\n\n# Calculate marker size based on normalized values\nmarker_size &lt;- size_range[1] + normalized_rainfall * (size_range[2] - size_range[1])\n\n# Create an interactive scatter plot\nfig1 &lt;- plot_ly(Historical_Records2, x = ~Year, y = ~Daily_Rainfall_Total,\n                marker = list(size = marker_size, \n                              color = ~Daily_Rainfall_Total, \n                              colorscale = \"Blues\",\n                              cmin = min_rainfall, \n                              cmax = max_rainfall,                        \n                              reversescale = TRUE, # Make the color gradient from light to dark\n                              showscale = TRUE,\n                              colorbar = list(title = \"Rainfall (mm)\", len = 0.5, thickness = 20)),\n                hoverinfo = \"text\",\n                text = ~paste(\"Date: Dec \", Day, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Daily Rainfall Total:\", Daily_Rainfall_Total, \"mm\"),\n                type = 'scatter', \n                mode = 'markers',\n                name = \"Daily Rainfall\")%&gt;%\n  layout(yaxis = list(autorange = \"reversed\", showgrid = FALSE))\n\n# Create a subplot with a dataframe beside the scatter plot\nfig2 &lt;- plot_ly(data = december_data, x = ~Year, y = ~Dec_Rainfall_Total, type = 'bar', name = \"Total Rainfall\",marker = list(color = \"#2E86C1\"))%&gt;%\n  layout(yaxis = list(autorange = \"reversed\", showgrid = FALSE))\n\n# Combine the plots into one subplot\nsubplot(fig1, fig2, nrows = 1, shareX = TRUE, shareY = FALSE, titleX = FALSE)%&gt;%\n  layout(title = \"Scatter-Bar Chart: December Daily Rainfall and Total Rainfall (Singapore, Changi)\")\n\n\n\n\n\n\n\n\n\n\nPackedbubble Chart\n\n\n\n\nShow the code: Packedbubble Chart: December Daily Rainfall and Total Rainfall (Singapore, Changi)\nq95 &lt;- as.numeric(quantile(Historical_Records2$Daily_Rainfall_Total, .95))\nhchart(Historical_Records2, \"packedbubble\", hcaes(name = Day, value = Daily_Rainfall_Total, group = Year))%&gt;%\n  hc_tooltip(\n    useHTML = TRUE,\n    pointFormat = \"&lt;b&gt;Dec {point.name}:&lt;/b&gt; {point.value} mm\"\n  ) %&gt;% \n  hc_title(text = 'Packedbubble Chart: December Daily Rainfall and Total Rainfall (Singapore, Changi)',\n           style = list(fontSize = '1.5em')) %&gt;%\n  hc_chart(\n    borderColor = '#757575',\n    borderRadius = 10,\n    borderWidth = 2,\n    backgroundColor = list(\n      linearGradient = c(0, 0, 500, 500),\n      stops = list(\n        list(0, 'rgb(250, 250, 250)'),\n        list(1, 'rgb(189, 189, 189)')\n        )\n      )\n    )%&gt;%\n  hc_plotOptions(\n    packedbubble = list(\n      maxSize = \"150%\",\n      zMin = 0,\n      layoutAlgorithm = list(\n        gravitationalConstant =  0.05,\n        splitSeries =  TRUE, # TRUE to group points\n        seriesInteraction = TRUE,\n        dragBetweenSeries = TRUE,\n        parentNodeLimit = TRUE\n      ),\n      dataLabels = list(\n        enabled = TRUE,\n        format = \"{point.value}mm\",\n        filter = list(\n          property = \"y\",\n          operator = \"&gt;\",\n          value = q95\n        ),\n        style = list(\n          color = \"black\",\n          textOutline = \"none\",\n          fontWeight = \"normal\"\n        ))))\n\n\n\n\n\n\n\n\n\n\nObservation from the above two charts:\nThe total rainfall and maximum daily rainfall in December 1983 were the highest, while in the rest years, they were lower. Conversely, in December 2023, both the total rainfall and maximum daily rainfall were the lowest. The maximum daily rainfall in December 1983 was nearly three times as much as that in December 2023.\n\n\n\nConclusion\nBased on the data set, we cannot discern a pattern in the total rainfall amount. However, it is evident that compared to 40 years ago, there has been a significant increase in the number of rainy days in December 2023, confirming that the frequency of rainfall events is increasing.",
    "crumbs": [
      "Take-home Exercise",
      "Take Home Ex03",
      "Be Weatherwise or Otherwise"
    ]
  }
]